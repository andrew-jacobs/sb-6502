
Portable 65xx Assembler [16.05]

                            ;===============================================================================
                            ;  ____  ____         __  ____   ____ ___ ____                 
                            ; / ___|| __ )       / /_| ___| / ___/ _ \___ \                
                            ; \___ \|  _ \ _____| '_ \___ \| |  | | | |__) |               
                            ;  ___) | |_) |_____| (_) |__) | |__| |_| / __/                
                            ; |____/|____/       \___/____/_\____\___/_____|_              
                            ; | __ )  ___   ___ | |_  |  \/  | ___  _ __ (_) |_ ___  _ __  
                            ; |  _ \ / _ \ / _ \| __| | |\/| |/ _ \| '_ \| | __/ _ \| '__| 
                            ; | |_) | (_) | (_) | |_  | |  | | (_) | | | | | || (_) | |    
                            ; |____/ \___/ \___/ \__| |_|  |_|\___/|_| |_|_|\__\___/|_|    
                            ;
                            ;
                            ;-------------------------------------------------------------------------------
                            ; Copyright (C)2014-2016 HandCoded Software Ltd.
                            ; All rights reserved.
                            ;
                            ; This work is made available under the terms of the Creative Commons
                            ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                            ; following URL to see the details.
                            ;
                            ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                            ;===============================================================================
                            ;
                            ; Notes:
                            ;
                            ;
                            ;-------------------------------------------------------------------------------
                            
                                            .65C02
                                            .include "monitor.asm"
                            
                            ;===============================================================================
                            ; Virtual Peripherals
                            ;-------------------------------------------------------------------------------
                            
        0000FE00          = ACIA_DATA       .EQU    $FE00
        0000FE01          = ACIA_STAT       .EQU    $FE01
        0000FE02          = ACIA_CMND       .EQU    $FE02
        0000FE03          = ACIA_CTRL       .EQU    $FE03
                            
        0000FE04          = SPI_DATA        .EQU    $FE04
        0000FE05          = SPI_STAT        .EQU    $FE05
        0000FE05          = SPI_CTRL        .EQU    $FE05
        0000FE06          = SPI_DVSR        .EQU    $FE06
        0000FE07          = SPI_SLCT        .EQU    $FE07
                            
                            ;===============================================================================
                            ; ASCII Control Characters
                            ;-------------------------------------------------------------------------------
                            
        00000000          = NUL             .EQU    $00
        00000007          = BEL             .EQU    $07
        00000008          = BS              .EQU    $08
        00000009          = HT              .EQU    $09

Portable 65xx Assembler [16.05]

        0000000D          = CR              .EQU    $0D
        0000000A          = LF              .EQU    $0A
        0000005E          = DC1             .EQU    '^'     ;$11
        00000021          = DC3             .EQU    '!'     ;$13
        0000001B          = ESC             .EQU    $1B
        0000007F          = DEL             .EQU    $7F
                            
                            ;===============================================================================
                            ;-------------------------------------------------------------------------------
                            
        00000000          = OP_ERR          .EQU    $00
        00000002          = OP_ADC          .EQU    $02
        00000004          = OP_AND          .EQU    $04
        00000006          = OP_ASL          .EQU    $06
                                            .IF     __65C02__
        00000009          = OP_BBR          .EQU    $09
        0000000A          = OP_BBS          .EQU    $0A
                                            .ENDIF
        0000000C          = OP_BCC          .EQU    $0C
        0000000E          = OP_BCS          .EQU    $0E
        00000010          = OP_BEQ          .EQU    $10
        00000012          = OP_BIT          .EQU    $12
        00000014          = OP_BNE          .EQU    $14
        00000016          = OP_BMI          .EQU    $16
        00000018          = OP_BPL          .EQU    $18
                                            .IF     __65C02__
        0000001A          = OP_BRA          .EQU    $1A
                                            .ENDIF
        0000001C          = OP_BRK          .EQU    $1C
        0000001E          = OP_BVC          .EQU    $1E
        00000020          = OP_BVS          .EQU    $20
        00000022          = OP_CLC          .EQU    $22
        00000024          = OP_CLD          .EQU    $24
        00000026          = OP_CLI          .EQU    $26
        00000028          = OP_CLV          .EQU    $28
        0000002A          = OP_CMP          .EQU    $2A
        0000002C          = OP_CPX          .EQU    $2C
        0000002E          = OP_CPY          .EQU    $2E
        00000030          = OP_DEC          .EQU    $30
        00000032          = OP_DEX          .EQU    $32
        00000034          = OP_DEY          .EQU    $34
        00000036          = OP_EOR          .EQU    $36
        00000038          = OP_INC          .EQU    $38
        0000003A          = OP_INX          .EQU    $3A
        0000003C          = OP_INY          .EQU    $3C
        0000003E          = OP_JMP          .EQU    $3E
        00000040          = OP_JSR          .EQU    $40
        00000042          = OP_LDA          .EQU    $42
        00000044          = OP_LDX          .EQU    $44
        00000046          = OP_LDY          .EQU    $46
        00000048          = OP_LSR          .EQU    $48
        0000004A          = OP_NOP          .EQU    $4A
        0000004C          = OP_ORA          .EQU    $4C
        0000004E          = OP_PHA          .EQU    $4E

Portable 65xx Assembler [16.05]

        00000050          = OP_PHP          .EQU    $50
                                            .IF     __65C02__
        00000052          = OP_PHX          .EQU    $52
        00000054          = OP_PHY          .EQU    $54
                                            .ENDIF
        00000056          = OP_PLA          .EQU    $56
        00000058          = OP_PLP          .EQU    $58
                                            .IF     __65C02__
        0000005A          = OP_PLX          .EQU    $5A
        0000005C          = OP_PLY          .EQU    $5C
        0000005E          = OP_RMB          .EQU    $5E
                                            .ENDIF
        00000060          = OP_ROL          .EQU    $60
        00000062          = OP_ROR          .EQU    $62
        00000064          = OP_RTI          .EQU    $64
        00000066          = OP_RTS          .EQU    $66
        00000068          = OP_SBC          .EQU    $68
        0000006A          = OP_SEC          .EQU    $6A
        0000006C          = OP_SED          .EQU    $6C
        0000006E          = OP_SEI          .EQU    $6E
                                            .IF     __65C02__
        00000070          = OP_SMB          .EQU    $70
                                            .ENDIF
        00000072          = OP_STA          .EQU    $72
                                            .IF     __65C02__
        00000074          = OP_STP          .EQU    $74
                                            .ENDIF
        00000076          = OP_STX          .EQU    $76
        00000078          = OP_STY          .EQU    $78
                                            .IF     __65C02__
        0000007A          = OP_STZ          .EQU    $7A
                                            .ENDIF
        0000007C          = OP_TAX          .EQU    $7C
        0000007E          = OP_TAY          .EQU    $7E
                                            .IF     __65C02__
        00000080          = OP_TRB          .EQU    $80
        00000082          = OP_TSB          .EQU    $82
                                            .ENDIF
        00000084          = OP_TSX          .EQU    $84
        00000086          = OP_TXA          .EQU    $86
        00000088          = OP_TXS          .EQU    $88
        0000008A          = OP_TYA          .EQU    $8A
                                            .IF     __65C02__
        0000008C          = OP_WAI          .EQU    $8C
                                            .ENDIF
                            
                            ; Bit patterns for addressing modes
                            
        00000080          = MB_IND          .EQU    %10000000
        00000040          = MB_REL          .EQU    %01000000
        00000020          = MB_BIT          .EQU    %00100000
                            
        00000000          = MB_IMP          .EQU    %00000000
        00000001          = MB_ZPG          .EQU    %00000001

Portable 65xx Assembler [16.05]

        00000002          = MB_IMM          .EQU    %00000010
        00000003          = MB_ABS          .EQU    %00000011
                            
        00000010          = MB_ACC          .EQU    %00010000
        00000008          = MB_XRG          .EQU    %00001000
        00000004          = MB_YRG          .EQU    %00000100
                            
                            ; Addressing modes
                            
                                            .IF     __65C02__
        00000021          = MO_BIT          .EQU    MB_BIT       |MB_ZPG
        00000061          = MO_BRL          .EQU    MB_BIT|MB_REL|MB_ZPG
                                            .ENDIF
        00000010          = MO_ACC          .EQU           MB_ACC|MB_IMP
        00000000          = MO_IMP          .EQU                  MB_IMP
        00000002          = MO_IMM          .EQU                  MB_IMM
        00000040          = MO_REL          .EQU                  MB_REL
        00000001          = MO_ZPG          .EQU                  MB_ZPG
        00000005          = MO_ZPX          .EQU           MB_YRG|MB_ZPG
        00000005          = MO_ZPY          .EQU           MB_YRG|MB_ZPG
                                            .IF     __65C02__
        00000081          = MO_IZP          .EQU    MB_IND       |MB_ZPG
                                            .ENDIF
        00000089          = MO_IZX          .EQU    MB_IND|MB_XRG|MB_ZPG
        00000085          = MO_IZY          .EQU    MB_IND|MB_YRG|MB_ZPG
        00000003          = MO_ABS          .EQU                  MB_ABS
        0000000B          = MO_ABX          .EQU           MB_XRG|MB_ABS
        00000007          = MO_ABY          .EQU           MB_YRG|MB_ABS
        00000083          = MO_IAB          .EQU    MB_IND       |MB_ABS
                                            .IF     __65C02__
        0000008B          = MO_IAX          .EQU    MB_IND|MB_XRG|MB_ABS
                                            .ENDIF
                            
                            ;===============================================================================
                            ; Data Areas
                            ;-------------------------------------------------------------------------------
                            
                                            .PAGE0
                                            .ORG    $00F0
                                            
0000F0  00                : A_REG           .SPACE  1
0000F1  00                : X_REG           .SPACE  1
0000F2  00                : Y_REG           .SPACE  1
0000F3  00                : P_REG           .SPACE  1
0000F4  0000              : PC_REG          .SPACE  2
                                            
0000F6  00                : CMD_LEN         .SPACE  1                       ; Command buffer length
0000F7  0000              : ADDR_S          .SPACE  2
0000F9  0000              : ADDR_E          .SPACE  2
                            
                            ;-------------------------------------------------------------------------------
                            
                                            .ORG    $00FB
                                            

Portable 65xx Assembler [16.05]

                            ; Communications buffer offsets
                            
0000FB  00                : RX_HEAD         .SPACE  1               ; UART recieve buffer offsets
0000FC  00                : RX_TAIL         .SPACE  1
0000FD  00                : TX_HEAD         .SPACE  1               ; UART transmit buffer offsets
0000FE  00                : TX_TAIL         .SPACE  1
                            
0000FF  00                : FLAGS           .SPACE  1               ; I/O Flags for XON/XOFF
                            
        00000080          = FLAG_STOPPED    .EQU    $80
        00000040          = FLAG_STOP       .EQU    $40
                            
                            ;-------------------------------------------------------------------------------
                            
                                            .ORG    $0100
                                            
000100  0000000000000000> : STACK           .SPACE  256
                            
                            ;===============================================================================
                            ; UART Buffers
                            ;-------------------------------------------------------------------------------
                            
        00000040          = RX_SIZE         .EQU    64
        00000040          = TX_SIZE         .EQU    64
                            
        00000080          = CMD_SIZE        .EQU    128
                            
                                            .BSS
                                            .ORG    $0200
                            
000200  0000000000000000> : RX_BUFF         .SPACE  RX_SIZE         ; UART recieve buffer
000240  0000000000000000> : TX_BUFF         .SPACE  TX_SIZE         ; UART transmit buffer
                            
000280  0000000000000000> : BUFFER          .SPACE  CMD_SIZE
                            
                            
                            
                                            .CODE
                                            .ORG    $F000
                                            
                            ;===============================================================================
                            ;-------------------------------------------------------------------------------
                            
                                            .IF     __6502__
                          - OPCODES:                
                          -                 .BYTE   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 0
                          -                 .BYTE   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                          -                 .BYTE   OP_BPL,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 1
                          -                 .BYTE   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                          -                 .BYTE   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 2
                          -                 .BYTE   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                          -                 .BYTE   OP_BMI,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 3
                          -                 .BYTE   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                          -                 .BYTE   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 4

Portable 65xx Assembler [16.05]

                          -                 .BYTE   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_ERR
                          -                 .BYTE   OP_BVC,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 5
                          -                 .BYTE   OP_CLI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR
                          -                 .BYTE   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 6
                          -                 .BYTE   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_ERR
                          -                 .BYTE   OP_BVS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 7
                          -                 .BYTE   OP_SEI,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR
                          -                 .BYTE   OP_ERR,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 8
                          -                 .BYTE   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR
                          -                 .BYTE   OP_BCC,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 9
                          -                 .BYTE   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_ERR,OP_STA,OP_ERR,OP_ERR
                          -                 .BYTE   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; A
                          -                 .BYTE   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                          -                 .BYTE   OP_BCS,OP_LDA,OP_ERR,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; B
                          -                 .BYTE   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                          -                 .BYTE   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR ; C
                          -                 .BYTE   OP_INY,OP_CMP,OP_DEX,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR
                          -                 .BYTE   OP_BNE,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR ; D
                          -                 .BYTE   OP_CLD,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR
                          -                 .BYTE   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR ; E
                          -                 .BYTE   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR
                          -                 .BYTE   OP_BEQ,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR ; F
                          -                 .BYTE   OP_SED,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR
                          -                 
                          - MODES:
                          -                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 0
                          -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 1
                          -                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                          -                 .BYTE   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
                          -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
                          -                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
                          -                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
                          -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                          -                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 6
                          -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 7
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                          -                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
                          -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_IMP,MO_IMP
                          -                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
                          -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP
                          -                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
                          -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                          -                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E

Portable 65xx Assembler [16.05]

                          -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                          -                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
                          -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                            .ENDIF
                                            
                            ;-------------------------------------------------------------------------------
                            
                                            .IF     __65C02__
                            OPCODES:
00F000  1C4C0000824C065E  :                 .BYTE   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_RMB ; 0
00F008  504C0600824C0609  :                 .BYTE   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_BBR
00F010  184C4C00804C065E  :                 .BYTE   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_RMB ; 1
00F018  224C3800804C0609  :                 .BYTE   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_BBR
00F020  400400001204605E  :                 .BYTE   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 2
00F028  5804600012046009  :                 .BYTE   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00F030  160404001204605E  :                 .BYTE   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 3
00F038  6A04300012046009  :                 .BYTE   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00F040  643600000036485E  :                 .BYTE   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 4
00F048  4E3648003E364809  :                 .BYTE   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_BBR
00F050  1E3636000036485E  :                 .BYTE   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 5
00F058  2636540000364809  :                 .BYTE   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_BBR
00F060  660200007A02625E  :                 .BYTE   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 6
00F068  560262003E026209  :                 .BYTE   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00F070  200202007A02625E  :                 .BYTE   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 7
00F078  6E025C003E026209  :                 .BYTE   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00F080  1A72000078727670  :                 .BYTE   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 8
00F088  341286007872760A  :                 .BYTE   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_BBS
00F090  0C72720078727670  :                 .BYTE   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 9
00F098  8A7288007A727A0A  :                 .BYTE   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_BBS
00F0A0  4642440046424470  :                 .BYTE   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; A
00F0A8  7E427C004642440A  :                 .BYTE   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00F0B0  0E42420046424470  :                 .BYTE   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; B
00F0B8  284284004642440A  :                 .BYTE   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00F0C0  2E2A00002E2A3070  :                 .BYTE   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_SMB ; C
00F0C8  3C2A328C2E2A300A  :                 .BYTE   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_BBS
00F0D0  142A2A00002A3070  :                 .BYTE   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_SMB ; D
00F0D8  242A5274002A300A  :                 .BYTE   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_BBS
00F0E0  2C6800002C683870  :                 .BYTE   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_SMB ; E
00F0E8  3A684A002C68380A  :                 .BYTE   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_BBS
00F0F0  1068680000683870  :                 .BYTE   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_SMB ; F
00F0F8  6C685A000068380A  :                 .BYTE   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_BBS
                            
                            MODES:
00F100  0289020001010101  :                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 0
00F108  0002100003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F110  4085810001050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_ZPG ; 1
00F118  00071000030B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00F120  0389000001010101  :                 .BYTE   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 2
00F128  0002100003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F130  4085810005050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 3
00F138  000710000B0B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_BRL
00F140  0089000000010101  :                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG ; 4
00F148  0002100003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F150  4085810000050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; 5

Portable 65xx Assembler [16.05]

00F158  00070000000B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00F160  0089000001010101  :                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 6
00F168  0002100083030361  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_BRL
00F170  4085810005050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 7
00F178  000700008B0B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_BRL
00F180  4089000001010101  :                 .BYTE   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 8
00F188  0002000003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F190  4085810005050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; 9
00F198  00070000030B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00F1A0  0289020001010101  :                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; A
00F1A8  0002000003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F1B0  4085810005050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; B
00F1B8  000700000B0B0761  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_BRL
00F1C0  0289000001010101  :                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; C
00F1C8  0002000003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F1D0  4085810000050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; D
00F1D8  00070000000B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00F1E0  0289000001010101  :                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; E
00F1E8  0002000003030361  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00F1F0  4085810000050501  :                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; F
00F1F8  00070000000B0B61  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                                            .ENDIF
                                            
                            ;-------------------------------------------------------------------------------
                            
                            SQUEEZE         .MACRO  CH1,CH2,CH3
                                            .WORD   ((((CH1 & $1F) << 5)|(CH2 & $1F)) << 5)|(CH3 & $1F)
                                            .ENDM
                                            
                            MNEMONICS:
                                            SQUEEZE 'A','D','C'
00F200  8304              +                 .WORD   (((('A' & $1F) << 5)|('D' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'A','N','D'
00F202  C405              +                 .WORD   (((('A' & $1F) << 5)|('N' & $1F)) << 5)|('D' & $1F)
                                            SQUEEZE 'A','S','L'
00F204  6C06              +                 .WORD   (((('A' & $1F) << 5)|('S' & $1F)) << 5)|('L' & $1F)
                                            SQUEEZE 'B','B','R'
00F206  5208              +                 .WORD   (((('B' & $1F) << 5)|('B' & $1F)) << 5)|('R' & $1F)
                                            SQUEEZE 'B','B','S'
00F208  5308              +                 .WORD   (((('B' & $1F) << 5)|('B' & $1F)) << 5)|('S' & $1F)
                                            SQUEEZE 'B','C','C'
00F20A  6308              +                 .WORD   (((('B' & $1F) << 5)|('C' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'B','C','S'
00F20C  7308              +                 .WORD   (((('B' & $1F) << 5)|('C' & $1F)) << 5)|('S' & $1F)
                                            SQUEEZE 'B','E','Q'
00F20E  B108              +                 .WORD   (((('B' & $1F) << 5)|('E' & $1F)) << 5)|('Q' & $1F)
                                            SQUEEZE 'B','I','T'
00F210  3409              +                 .WORD   (((('B' & $1F) << 5)|('I' & $1F)) << 5)|('T' & $1F)
                                            SQUEEZE 'B','N','E'
00F212  C509              +                 .WORD   (((('B' & $1F) << 5)|('N' & $1F)) << 5)|('E' & $1F)
                                            SQUEEZE 'B','M','I'
00F214  A909              +                 .WORD   (((('B' & $1F) << 5)|('M' & $1F)) << 5)|('I' & $1F)
                                            SQUEEZE 'B','P','L'
00F216  0C0A              +                 .WORD   (((('B' & $1F) << 5)|('P' & $1F)) << 5)|('L' & $1F)

Portable 65xx Assembler [16.05]

                                            SQUEEZE 'B','R','A'
00F218  410A              +                 .WORD   (((('B' & $1F) << 5)|('R' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'B','R','K'
00F21A  4B0A              +                 .WORD   (((('B' & $1F) << 5)|('R' & $1F)) << 5)|('K' & $1F)
                                            SQUEEZE 'B','V','C'
00F21C  C30A              +                 .WORD   (((('B' & $1F) << 5)|('V' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'B','V','S'
00F21E  D30A              +                 .WORD   (((('B' & $1F) << 5)|('V' & $1F)) << 5)|('S' & $1F)
                                            SQUEEZE 'C','L','C'
00F220  830D              +                 .WORD   (((('C' & $1F) << 5)|('L' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'C','L','D'
00F222  840D              +                 .WORD   (((('C' & $1F) << 5)|('L' & $1F)) << 5)|('D' & $1F)
                                            SQUEEZE 'C','L','I'
00F224  890D              +                 .WORD   (((('C' & $1F) << 5)|('L' & $1F)) << 5)|('I' & $1F)
                                            SQUEEZE 'C','L','V'
00F226  960D              +                 .WORD   (((('C' & $1F) << 5)|('L' & $1F)) << 5)|('V' & $1F)
                                            SQUEEZE 'C','M','P'
00F228  B00D              +                 .WORD   (((('C' & $1F) << 5)|('M' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'C','P','X'
00F22A  180E              +                 .WORD   (((('C' & $1F) << 5)|('P' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'C','P','Y'
00F22C  190E              +                 .WORD   (((('C' & $1F) << 5)|('P' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'D','E','C'
00F22E  A310              +                 .WORD   (((('D' & $1F) << 5)|('E' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'D','E','X'
00F230  B810              +                 .WORD   (((('D' & $1F) << 5)|('E' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'D','E','Y'
00F232  B910              +                 .WORD   (((('D' & $1F) << 5)|('E' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'E','O','R'
00F234  F215              +                 .WORD   (((('E' & $1F) << 5)|('O' & $1F)) << 5)|('R' & $1F)
                                            SQUEEZE 'I','N','C'
00F236  C325              +                 .WORD   (((('I' & $1F) << 5)|('N' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'I','N','X'
00F238  D825              +                 .WORD   (((('I' & $1F) << 5)|('N' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'I','N','Y'
00F23A  D925              +                 .WORD   (((('I' & $1F) << 5)|('N' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'J','M','P'
00F23C  B029              +                 .WORD   (((('J' & $1F) << 5)|('M' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'J','S','R'
00F23E  722A              +                 .WORD   (((('J' & $1F) << 5)|('S' & $1F)) << 5)|('R' & $1F)
                                            SQUEEZE 'L','D','A'
00F240  8130              +                 .WORD   (((('L' & $1F) << 5)|('D' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'L','D','X'
00F242  9830              +                 .WORD   (((('L' & $1F) << 5)|('D' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'L','D','Y'
00F244  9930              +                 .WORD   (((('L' & $1F) << 5)|('D' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'L','S','R'
00F246  7232              +                 .WORD   (((('L' & $1F) << 5)|('S' & $1F)) << 5)|('R' & $1F)
                                            SQUEEZE 'N','O','P'
00F248  F039              +                 .WORD   (((('N' & $1F) << 5)|('O' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'O','R','A'
00F24A  413E              +                 .WORD   (((('O' & $1F) << 5)|('R' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'P','H','A'
00F24C  0141              +                 .WORD   (((('P' & $1F) << 5)|('H' & $1F)) << 5)|('A' & $1F)

Portable 65xx Assembler [16.05]

                                            SQUEEZE 'P','H','P'
00F24E  1041              +                 .WORD   (((('P' & $1F) << 5)|('H' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'P','H','X'
00F250  1841              +                 .WORD   (((('P' & $1F) << 5)|('H' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'P','H','Y'
00F252  1941              +                 .WORD   (((('P' & $1F) << 5)|('H' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'P','L','A'
00F254  8141              +                 .WORD   (((('P' & $1F) << 5)|('L' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'P','L','P'
00F256  9041              +                 .WORD   (((('P' & $1F) << 5)|('L' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'P','L','X'
00F258  9841              +                 .WORD   (((('P' & $1F) << 5)|('L' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'P','L','Y'
00F25A  9941              +                 .WORD   (((('P' & $1F) << 5)|('L' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'R','M','B'
00F25C  A249              +                 .WORD   (((('R' & $1F) << 5)|('M' & $1F)) << 5)|('B' & $1F)
                                            SQUEEZE 'R','O','L'
00F25E  EC49              +                 .WORD   (((('R' & $1F) << 5)|('O' & $1F)) << 5)|('L' & $1F)
                                            SQUEEZE 'R','O','R'
00F260  F249              +                 .WORD   (((('R' & $1F) << 5)|('O' & $1F)) << 5)|('R' & $1F)
                                            SQUEEZE 'R','T','I'
00F262  894A              +                 .WORD   (((('R' & $1F) << 5)|('T' & $1F)) << 5)|('I' & $1F)
                                            SQUEEZE 'R','T','S'
00F264  934A              +                 .WORD   (((('R' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                            SQUEEZE 'S','B','C'
00F266  434C              +                 .WORD   (((('S' & $1F) << 5)|('B' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'S','E','C'
00F268  A34C              +                 .WORD   (((('S' & $1F) << 5)|('E' & $1F)) << 5)|('C' & $1F)
                                            SQUEEZE 'S','E','D'
00F26A  A44C              +                 .WORD   (((('S' & $1F) << 5)|('E' & $1F)) << 5)|('D' & $1F)
                                            SQUEEZE 'S','E','I'
00F26C  A94C              +                 .WORD   (((('S' & $1F) << 5)|('E' & $1F)) << 5)|('I' & $1F)
                                            SQUEEZE 'S','M','B'
00F26E  A24D              +                 .WORD   (((('S' & $1F) << 5)|('M' & $1F)) << 5)|('B' & $1F)
                                            SQUEEZE 'S','T','A'
00F270  814E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'S','T','P'
00F272  904E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('P' & $1F)
                                            SQUEEZE 'S','T','X'
00F274  984E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'S','T','Y'
00F276  994E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'S','T','Z'
00F278  9A4E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('Z' & $1F)
                                            SQUEEZE 'T','A','X'
00F27A  3850              +                 .WORD   (((('T' & $1F) << 5)|('A' & $1F)) << 5)|('X' & $1F)
                                            SQUEEZE 'T','A','Y'
00F27C  3950              +                 .WORD   (((('T' & $1F) << 5)|('A' & $1F)) << 5)|('Y' & $1F)
                                            SQUEEZE 'T','R','B'
00F27E  4252              +                 .WORD   (((('T' & $1F) << 5)|('R' & $1F)) << 5)|('B' & $1F)
                                            SQUEEZE 'T','S','B'
00F280  6252              +                 .WORD   (((('T' & $1F) << 5)|('S' & $1F)) << 5)|('B' & $1F)
                                            SQUEEZE 'T','S','X'
00F282  7852              +                 .WORD   (((('T' & $1F) << 5)|('S' & $1F)) << 5)|('X' & $1F)

Portable 65xx Assembler [16.05]

                                            SQUEEZE 'T','X','A'
00F284  0153              +                 .WORD   (((('T' & $1F) << 5)|('X' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'T','X','S'
00F286  1353              +                 .WORD   (((('T' & $1F) << 5)|('X' & $1F)) << 5)|('S' & $1F)
                                            SQUEEZE 'T','Y','A'
00F288  2153              +                 .WORD   (((('T' & $1F) << 5)|('Y' & $1F)) << 5)|('A' & $1F)
                                            SQUEEZE 'W','A','I'
00F28A  295C              +                 .WORD   (((('W' & $1F) << 5)|('A' & $1F)) << 5)|('I' & $1F)
                            
                            ;===============================================================================
                            ;
                            ;-------------------------------------------------------------------------------
                            
                            BREAK:
00F28C  58                :                 CLI                     ; Allow interrupts
00F28D  68                :                 PLA
00F28E  85F2              :                 STA     Y_REG
00F290  68                :                 PLA
00F291  85F1              :                 STA     X_REG
00F293  68                :                 PLA
00F294  85F0              :                 STA     A_REG
00F296  68                :                 PLA
00F297  85F3              :                 STA     P_REG
00F299  38                :                 SEC
00F29A  68                :                 PLA
00F29B  E902              :                 SBC     #2
00F29D  85F4              :                 STA     PC_REG+0
00F29F  68                :                 PLA
00F2A0  E900              :                 SBC     #0
00F2A2  85F5              :                 STA     PC_REG+1
                            
                            REGISTERS:
00F2A4  2052F3            :                 JSR     CRLF
00F2A7  A200              :                 LDX     #PC_STR
00F2A9  205CF3            :                 JSR     SHOW_STR
00F2AC  A5F5              :                 LDA     PC_REG+1
00F2AE  2038F3            :                 JSR     HEX2
00F2B1  A5F4              :                 LDA     PC_REG+0
00F2B3  2038F3            :                 JSR     HEX2
                            
00F2B6  A208              :                 LDX     #A_STR
00F2B8  205CF3            :                 JSR     SHOW_STR
00F2BB  A5F0              :                 LDA     A_REG
00F2BD  2038F3            :                 JSR     HEX2
                                            
00F2C0  A20C              :                 LDX     #X_STR
00F2C2  205CF3            :                 JSR     SHOW_STR
00F2C5  A5F1              :                 LDA     X_REG
00F2C7  2038F3            :                 JSR     HEX2
                                            
00F2CA  A210              :                 LDX     #Y_STR
00F2CC  205CF3            :                 JSR     SHOW_STR
00F2CF  A5F2              :                 LDA     Y_REG
00F2D1  2038F3            :                 JSR     HEX2

Portable 65xx Assembler [16.05]

                                            
                            COMMAND:
                                            .IF     __65C02__
00F2D4  64F6              :                 STZ     CMD_LEN         ; Mark the buffer as empty
                                            .ELSE
                          -                 LDA     #0              ; Mark the buffer as empty
                          -                 STA     CMD_LEN
                                            .ENDIF
                            
                            PROMPT:
00F2D6  2052F3            :                 JSR     CRLF            ; Move cursor to next line
00F2D9  A92E              :                 LDA     #'.'            ; And output the prompt
00F2DB  2016FF            :                 JSR     UART_TX
                                            
00F2DE  A200              :                 LDX     #0              
                                            REPEAT
00F2E0  E4F6              :                  CPX    CMD_LEN         ; Any saved characters to display?
00F2E2  F009              :                  BREAK  EQ              ; No
00F2E4  BD8002            :                  LDA    BUFFER,X        ; Yes, print from the buffer
00F2E7  2016FF            :                  JSR    UART_TX
00F2EA  E8                :                  INX
00F2EB  80F3              :                 FOREVER
                            
                                            REPEAT
00F2ED  202AFF            :                  JSR    UART_RX         ; Wait for some user input
                            
00F2F0  C908              :                  CMP    #BS             ; Backspace?
00F2F2  D012              :                  IF     EQ
00F2F4  E000              : BACKSPACE:        CPX   #0              ; Anything in the buffer?
00F2F6  F00E              :                   IF    NE
00F2F8  48                :                    PHA                  ; Erase the last character
00F2F9  2016FF            :                    JSR  UART_TX
00F2FC  204DF3            :                    JSR  SPACE
00F2FF  68                :                    PLA
00F300  2016FF            :                    JSR  UART_TX
00F303  CA                :                    DEX
00F304  80E7              :                    CONTINUE
                                              ENDIF
                                             ENDIF
                                             
00F306  C90D              :                  CMP    #CR             ; End of command entry?
00F308  F01E              :                  BREAK  EQ              ; Yes
                                             
00F30A  C97F              :                  CMP    #DEL            
00F30C  D004              :                  IF     EQ
00F30E  A908              :                   LDA   #BS
00F310  D0E2              :                   BNE   BACKSPACE
                                             ENDIF
00F312  9007              :                  IF     CS              ; In the range $7F-$FF?
00F314  A907              : SQUAWK:           LDA   #BEL            ; Yes, squawk!
00F316  2016FF            :                   JSR   UART_TX
00F319  80D2              :                   CONTINUE
                                             ENDIF
                                             

Portable 65xx Assembler [16.05]

00F31B  C920              :                  CMP    #' '            ; In the range $00-$1F?
00F31D  90F5              :                  BCC    SQUAWK          ; Yes, squawk!
                                             
00F31F  9D8002            :                  STA    BUFFER,X        ; Save the character
00F322  E8                :                  INX                    ; Bump the count
00F323  2016FF            :                  JSR    UART_TX         ; And echo to terminal
00F326  80C5              :                 FOREVER
                                            
00F328  86F6              :                 STX     CMD_LEN         ; Save the command length
                            
                            ;===============================================================================
                            ; 'G' - Go
                            ;-------------------------------------------------------------------------------
                            
00F32A  C547              :                 CMP     'G'
00F32C  D000              :                 IF      EQ
                                            
                                            
                                            ENDIF
                                            
                            ;===============================================================================
                            ; 'R' - Show Registers
                            ;-------------------------------------------------------------------------------
                            
00F32E  C553              :                 CMP     'S'
00F330  D003              :                 IF      EQ
00F332  4CA4F2            :                  JMP    REGISTERS
                                            ENDIF
                            
00F335  4CD4F2            :                 JMP     COMMAND
                            
                            ;===============================================================================
                            ; Display Utilities
                            ;-------------------------------------------------------------------------------
                            
                            ; Display the byte in A as two hexadecimal digits. The values in A & Y are
                            ; destroyed.
                            
                            HEX2:   
00F338  48                :                 PHA                     ; Save a copy of the value
00F339  4A                :                 LSR     A               ; Shift down the hi nybble
00F33A  4A                :                 LSR     A
00F33B  4A                :                 LSR     A
00F33C  4A                :                 LSR     A
00F33D  2041F3            :                 JSR     HEX             ; Convert and display
00F340  68                :                 PLA                     ; Pull back value and ...
                                            
                            ; Display the lo nybble of A as a hexadecimal digit. The values in A & Y are
                            ; destroyed.
                            
00F341  290F              : HEX             AND     #$0F            ; Isolate the lo nybble 
00F343  F8                :                 SED                     ; Converted to ASCII
00F344  18                :                 CLC
00F345  6990              :                 ADC     #$90

Portable 65xx Assembler [16.05]

00F347  6940              :                 ADC     #$40
00F349  D8                :                 CLD
00F34A  4C16FF            :                 JMP     UART_TX         ; And display.
                            
                            ; Output a single space. The values in A & Y are destroyed.     
                            
                            SPACE:
00F34D  A920              :                 LDA     #' '            
00F34F  4C16FF            :                 JMP     UART_TX
                                            
                            ; Output a CR/LF control sequence to move the display cursor to the start of
                            ; the next line. A & Y are destroyed.
                            
                            CRLF:
00F352  A90D              :                 LDA     #CR             ; Output a carriage return
00F354  2016FF            :                 JSR     UART_TX
00F357  A90A              :                 LDA     #LF             ; .. followed by a new line
00F359  4C16FF            :                 JMP     UART_TX
                                            
                            ;===============================================================================
                            
                            
                            SHOW_STR:
                                            REPEAT
00F35C  BD68F3            :                  LDA    STRINGS,X
00F35F  D001              :                  IF     EQ
00F361  60                :                   RTS
                                             ENDIF
00F362  2016FF            :                  JSR    UART_TX
00F365  E8                :                  INX
00F366  80F4              :                 FOREVER
                            
                            STRINGS:
        00000000          = PC_STR          .EQU    .-STRINGS
00F368  50433D00          :                 .BYTE   "PC=",0
        00000004          = P_STR           .EQU    .-STRINGS
00F36C  20503D00          :                 .BYTE   " P=",0
        00000008          = A_STR           .EQU    .-STRINGS
00F370  20413D00          :                 .BYTE   " A=",0
        0000000C          = X_STR           .EQU    .-STRINGS
00F374  20583D00          :                 .BYTE   " X=",0
        00000010          = Y_STR           .EQU    .-STRINGS
00F378  20593D00          :                 .BYTE   " Y=",0
                                            
                            
                            ;===============================================================================
                            ; I/O Page
                            ;-------------------------------------------------------------------------------
                            
                                            .ORG    $FE00
00FE00  0000000000000000> :                 .SPACE  256
                            
                            ;===============================================================================
                            ; Reset Handler

Portable 65xx Assembler [16.05]

                            ;-------------------------------------------------------------------------------
                            
                                            .ORG    $FF00
                            
                            RESET:
00FF00  D8                :                 CLD                     ; Ensure binary mode
00FF01  A2FF              :                 LDX     #$FF            ; Reset the stack
00FF03  9A                :                 TXS
                            
00FF04  E8                :                 INX                     ; Clear buffer offsets
00FF05  86FB              :                 STX     RX_HEAD
00FF07  86FC              :                 STX     RX_TAIL
00FF09  86FD              :                 STX     TX_HEAD
00FF0B  86FE              :                 STX     TX_TAIL
00FF0D  86FF              :                 STX     FLAGS           ; And flow control flags
                            
00FF0F  A901              :                 LDA     #$01            ; Enable ACIA RX interrupt
00FF11  8D02FE            :                 STA     ACIA_CMND
                            
00FF14  58                :                 CLI                     ; Allow interrupts
00FF15  00                :                 BRK
                                            
                            ;===============================================================================
                            ; UART Interface
                            ;-------------------------------------------------------------------------------
                            
                            ; Inserts the byte in A into the transmit buffer. If the buffer is full then
                            ; wait until some space is available. A & Y are destroyed.
                            
                            UART_TX:
00FF16  A4FE              :                 LDY     TX_TAIL         ; Save the data byte at the tail
00FF18  994002            :                 STA     TX_BUFF,Y
00FF1B  20C4FF            :                 JSR     BUMP_TX         ; Work out the next offset
                                            REPEAT                  ; And wait until save to store
00FF1E  C4FD              :                  CPY    TX_HEAD
00FF20  F0FC              :                 UNTIL   NE
00FF22  84FE              :                 STY     TX_TAIL
00FF24  A905              :                 LDA     #$05            ; Ensure TX interrupt enabled
00FF26  8D02FE            :                 STA     ACIA_CMND
00FF29  60                :                 RTS                     ; Done
                            
                            ;
                            ;
                            
                            UART_RX:
00FF2A  24FF              :                 BIT     FLAGS           ; Terminal stopped from sending?
00FF2C  100E              :                 IF      MI
00FF2E  204BFF            :                  JSR    RX_COUNT        ; Yes, check RX buffer count
00FF31  C906              :                  CMP    #RX_SIZE*1/10   ; Restart when only 10% full
00FF33  B007              :                  IF     CC
00FF35  A95E              :                   LDA   #DC1            ; Send XON
00FF37  2016FF            :                   JSR   UART_TX
                                            .IF     __65C02__
00FF3A  64FF              :                   STZ   FLAGS           ; Mark as no longer stopped

Portable 65xx Assembler [16.05]

                                            .ELSE
                          -                   LDA   #0              ; Mark as no longer stopped
                          -                   STA   FLAGS
                                            .ENDIF
                                             ENDIF
                                            ENDIF
                                            
00FF3C  A4FB              :                 LDY     RX_HEAD         ; Wait until there is some data
                                            REPEAT
00FF3E  C4FC              :                  CPY    RX_TAIL
00FF40  F0FC              :                 UNTIL   NE
00FF42  B90002            :                 LDA     RX_BUFF,Y       ; Then extract the head byte
00FF45  20C4FF            :                 JSR     BUMP_RX         ; Update the offset
00FF48  84FB              :                 STY     RX_HEAD
00FF4A  60                :                 RTS                     ; Done
                            
                            ;
                            ;
                            
                            RX_COUNT:
00FF4B  38                :                 SEC
00FF4C  A5FC              :                 LDA     RX_TAIL         ; Subtract the two offsets
00FF4E  E5FB              :                 SBC     RX_HEAD
00FF50  1002              :                 IF      MI
00FF52  6940              :                  ADC    #RX_SIZE        ; And correct if negative
                                            ENDIF
00FF54  60                :                 RTS                     ; Done
                            
                            ;===============================================================================
                            ; IRQ Handler
                            ;-------------------------------------------------------------------------------
                            
                            ; Handle interrupts, currently just UART transmit buffer empty and recieve
                            ; buffer full.
                            
                            IRQ:
00FF55  48                :                 PHA                     ; Save users registers
                                            .IF     __65C02__
00FF56  DA                :                 PHX
00FF57  5A                :                 PHY
                                            .ELSE
                          -                 TXA
                          -                 PHA
                          -                 TYA
                          -                 PHA
                          -                 CLD
                                            .ENDIF
                                            
00FF58  BA                :                 TSX                     ; Check for BRK
00FF59  BD0401            :                 LDA     STACK+4,X
00FF5C  2910              :                 AND     #$10
00FF5E  F003              :                 IF      NE
00FF60  4C8CF2            :                  JMP    BREAK
                                            ENDIF

Portable 65xx Assembler [16.05]

                                            
                            ;-------------------------------------------------------------------------------
                            
00FF63  AD01FE            :                 LDA     ACIA_STAT       ; ACIA is the source?
00FF66  1058              :                 BPL     NOT_ACIA        ; No.
                                            
00FF68  48                :                 PHA
00FF69  2908              :                 AND     #$08            ; RX Buffer full?
00FF6B  F029              :                 IF      NE
00FF6D  AD00FE            :                  LDA    ACIA_DATA       ; Yes, fetch the character
00FF70  A4FC              :                  LDY    RX_TAIL         ; .. and save it
00FF72  990002            :                  STA    RX_BUFF,Y
00FF75  20C4FF            :                  JSR    BUMP_RX
00FF78  C4FB              :                  CPY    RX_HEAD         ; Is buffer completely full?
00FF7A  F002              :                  IF     NE
00FF7C  84FC              :                   STY   RX_TAIL         ; No, update tail offset
                                             ENDIF
                                            
00FF7E  A9C0              :                  LDA    #$C0            ; Already stopped or stopping?
00FF80  24FF              :                  BIT    FLAGS
00FF82  3012              :                  IF     PL
00FF84  D010              :                   IF    EQ
00FF86  204BFF            :                    JSR  RX_COUNT        ; Fetch FX buffer count
00FF89  C939              :                    CMP  #RX_SIZE*9/10   ; More than 90%
00FF8B  9009              :                    IF   CS
00FF8D  A940              :                     LDA #FLAG_STOP      ; Yes, set flags to send XOFF
                                            .IF     __65C02__
00FF8F  04FF              :                     TSB FLAGS
                                            .ELSE
                          -                     ORA FLAGS
                          -                     STA FLAGS
                                            .ENDIF
00FF91  A905              :                     LDA #$05            ; Ensure transmit interrupt enabled
00FF93  8D02FE            :                     STA ACIA_CMND
                                               ENDIF
                                              ENDIF
                                             ENDIF
                                            ENDIF
                            
00FF96  68                :                 PLA
00FF97  2910              :                 AND     #$10            ; TX Buffer empty?
00FF99  F025              :                 IF      NE
00FF9B  24FF              :                  BIT    FLAGS           ; Do we need to send XOFF?
00FF9D  5009              :                  IF     VS
00FF9F  A921              :                   LDA   #DC3            ; Yes, send XOFF to terminal
00FFA1  8D00FE            :                   STA   ACIA_DATA
00FFA4  06FF              :                   ASL   FLAGS           ; And mark as sent
00FFA6  D018              :                   BNE   NOT_ACIA
                                             ENDIF
                                            
00FFA8  A4FD              :                  LDY    TX_HEAD         ; Any data to send?
00FFAA  C4FE              :                  CPY    TX_TAIL
00FFAC  F00D              :                  IF     NE
00FFAE  B94002            :                   LDA   TX_BUFF,Y       ; Yes, extract and send it

Portable 65xx Assembler [16.05]

00FFB1  8D00FE            :                   STA   ACIA_DATA
00FFB4  20C4FF            :                   JSR   BUMP_TX
00FFB7  84FD              :                   STY   TX_HEAD
00FFB9  8005              :                  ELSE
00FFBB  A901              :                   LDA   #$01            ; No, disable TX interrupt
00FFBD  8D02FE            :                   STA   ACIA_CMND
                                             ENDIF
                                            ENDIF
                            NOT_ACIA:
                            
                            ;-------------------------------------------------------------------------------
                            
                                            .IF     __65C02__
00FFC0  7A                :                 PLY                     ; Restore user registers
00FFC1  FA                :                 PLX
                                            .ELSE
                          -                 PLA                     ; Restore user registers
                          -                 TAY
                          -                 PLA
                          -                 TAX
                                            .ENDIF
00FFC2  68                :                 PLA
00FFC3  40                :                 RTI                     ; Done
                            
                            ; Bump and wrap a recieve buffer index value.
                            
                            BUMP_RX:
                                            .IF     RX_SIZE != TX_SIZE
                          -                 INY
                          -                 CPY     #RX_SIZE
                          -                 IF      EQ
                          -                  LDY    #0
                          -                 ENDIF
                          -                 RTS
                                            .ENDIF
                            
                            ; Bump and wrap a transmit buffer index value.
                            
                            BUMP_TX:
00FFC4  C8                :                 INY
00FFC5  C040              :                 CPY     #TX_SIZE
00FFC7  D002              :                 IF      EQ
00FFC9  A000              :                  LDY    #0
                                            ENDIF
00FFCB  60                :                 RTS
                            
                            ;===============================================================================
                            ; NMI Handler
                            ;-------------------------------------------------------------------------------
                            
                            NMI:
00FFCC  40                :                 RTI
                            
                            ;===============================================================================

Portable 65xx Assembler [16.05]

                            ; Vector Locations
                            ;-------------------------------------------------------------------------------
                            
                                            .ORG    $FFFA
                            
00FFFA  CCFF              :                 .WORD   NMI             ; NMI
00FFFC  00FF              :                 .WORD   RESET           ; RESET
00FFFE  55FF              :                 .WORD   IRQ             ; IRQ/BRK
                            
                                            .END


Portable 65xx Assembler [16.05]

Symbol Table

ACIA_CMND                        0000FE02  | MB_IMP                           00000000 
ACIA_CTRL                        0000FE03  | MO_IMP                           00000000 
ACIA_DATA                        0000FE00  | NUL                              00000000 
ACIA_STAT                        0000FE01  | OP_ERR                           00000000 
ADDR_E                           000000F9  | PC_STR                           00000000 
ADDR_S                           000000F7  | __6501__                         00000000 
A_REG                            000000F0  | __6502__                         00000000 
A_STR                            00000008  | __65816__                        00000000 
BACKSPACE                        0000F2F4  | __65832__                        00000000 
BEL                              00000007  | __65SC02__                       00000000 
BREAK                            0000F28C  | MB_ZPG                           00000001 
BS                               00000008  | MO_ZPG                           00000001 
BUFFER                           00000280  | __65C02__                        00000001 
BUMP_RX                          0000FFC4  | MB_IMM                           00000002 
BUMP_TX                          0000FFC4  | MO_IMM                           00000002 
CMD_LEN                          000000F6  | OP_ADC                           00000002 
CMD_SIZE                         00000080  | MB_ABS                           00000003 
COMMAND                          0000F2D4  | MO_ABS                           00000003 
CR                               0000000D  | MB_YRG                           00000004 
CRLF                             0000F352  | OP_AND                           00000004 
DC1                              0000005E  | P_STR                            00000004 
DC3                              00000021  | MO_ZPX                           00000005 
DEL                              0000007F  | MO_ZPY                           00000005 
ESC                              0000001B  | OP_ASL                           00000006 
FLAGS                            000000FF  | BEL                              00000007 
FLAG_STOP                        00000040  | MO_ABY                           00000007 
FLAG_STOPPED                     00000080  | A_STR                            00000008 
HEX                              0000F341  | BS                               00000008 
HEX2                             0000F338  | MB_XRG                           00000008 
HT                               00000009  | HT                               00000009 
IRQ                              0000FF55  | OP_BBR                           00000009 
LF                               0000000A  | LF                               0000000A 
MB_ABS                           00000003  | OP_BBS                           0000000A 
MB_ACC                           00000010  | MO_ABX                           0000000B 
MB_BIT                           00000020  | OP_BCC                           0000000C 
MB_IMM                           00000002  | X_STR                            0000000C 
MB_IMP                           00000000  | CR                               0000000D 
MB_IND                           00000080  | OP_BCS                           0000000E 
MB_REL                           00000040  | MB_ACC                           00000010 
MB_XRG                           00000008  | MO_ACC                           00000010 
MB_YRG                           00000004  | OP_BEQ                           00000010 
MB_ZPG                           00000001  | Y_STR                            00000010 
MNEMONICS                        0000F200  | OP_BIT                           00000012 
MODES                            0000F100  | OP_BNE                           00000014 
MO_ABS                           00000003  | OP_BMI                           00000016 
MO_ABX                           0000000B  | OP_BPL                           00000018 
MO_ABY                           00000007  | OP_BRA                           0000001A 
MO_ACC                           00000010  | ESC                              0000001B 
MO_BIT                           00000021  | OP_BRK                           0000001C 
MO_BRL                           00000061  | OP_BVC                           0000001E 
MO_IAB                           00000083  | MB_BIT                           00000020 
MO_IAX                           0000008B  | OP_BVS                           00000020 

Portable 65xx Assembler [16.05]

MO_IMM                           00000002  | DC3                              00000021 
MO_IMP                           00000000  | MO_BIT                           00000021 
MO_IZP                           00000081  | OP_CLC                           00000022 
MO_IZX                           00000089  | OP_CLD                           00000024 
MO_IZY                           00000085  | OP_CLI                           00000026 
MO_REL                           00000040  | OP_CLV                           00000028 
MO_ZPG                           00000001  | OP_CMP                           0000002A 
MO_ZPX                           00000005  | OP_CPX                           0000002C 
MO_ZPY                           00000005  | OP_CPY                           0000002E 
NMI                              0000FFCC  | OP_DEC                           00000030 
NOT_ACIA                         0000FFC0  | OP_DEX                           00000032 
NUL                              00000000  | OP_DEY                           00000034 
OPCODES                          0000F000  | OP_EOR                           00000036 
OP_ADC                           00000002  | OP_INC                           00000038 
OP_AND                           00000004  | OP_INX                           0000003A 
OP_ASL                           00000006  | OP_INY                           0000003C 
OP_BBR                           00000009  | OP_JMP                           0000003E 
OP_BBS                           0000000A  | FLAG_STOP                        00000040 
OP_BCC                           0000000C  | MB_REL                           00000040 
OP_BCS                           0000000E  | MO_REL                           00000040 
OP_BEQ                           00000010  | OP_JSR                           00000040 
OP_BIT                           00000012  | RX_SIZE                          00000040 
OP_BMI                           00000016  | TX_SIZE                          00000040 
OP_BNE                           00000014  | OP_LDA                           00000042 
OP_BPL                           00000018  | OP_LDX                           00000044 
OP_BRA                           0000001A  | OP_LDY                           00000046 
OP_BRK                           0000001C  | OP_LSR                           00000048 
OP_BVC                           0000001E  | OP_NOP                           0000004A 
OP_BVS                           00000020  | OP_ORA                           0000004C 
OP_CLC                           00000022  | OP_PHA                           0000004E 
OP_CLD                           00000024  | OP_PHP                           00000050 
OP_CLI                           00000026  | OP_PHX                           00000052 
OP_CLV                           00000028  | OP_PHY                           00000054 
OP_CMP                           0000002A  | OP_PLA                           00000056 
OP_CPX                           0000002C  | OP_PLP                           00000058 
OP_CPY                           0000002E  | OP_PLX                           0000005A 
OP_DEC                           00000030  | OP_PLY                           0000005C 
OP_DEX                           00000032  | DC1                              0000005E 
OP_DEY                           00000034  | OP_RMB                           0000005E 
OP_EOR                           00000036  | OP_ROL                           00000060 
OP_ERR                           00000000  | MO_BRL                           00000061 
OP_INC                           00000038  | OP_ROR                           00000062 
OP_INX                           0000003A  | OP_RTI                           00000064 
OP_INY                           0000003C  | OP_RTS                           00000066 
OP_JMP                           0000003E  | OP_SBC                           00000068 
OP_JSR                           00000040  | OP_SEC                           0000006A 
OP_LDA                           00000042  | OP_SED                           0000006C 
OP_LDX                           00000044  | OP_SEI                           0000006E 
OP_LDY                           00000046  | OP_SMB                           00000070 
OP_LSR                           00000048  | OP_STA                           00000072 
OP_NOP                           0000004A  | OP_STP                           00000074 
OP_ORA                           0000004C  | OP_STX                           00000076 
OP_PHA                           0000004E  | OP_STY                           00000078 
OP_PHP                           00000050  | OP_STZ                           0000007A 

Portable 65xx Assembler [16.05]

OP_PHX                           00000052  | OP_TAX                           0000007C 
OP_PHY                           00000054  | OP_TAY                           0000007E 
OP_PLA                           00000056  | DEL                              0000007F 
OP_PLP                           00000058  | CMD_SIZE                         00000080 
OP_PLX                           0000005A  | FLAG_STOPPED                     00000080 
OP_PLY                           0000005C  | MB_IND                           00000080 
OP_RMB                           0000005E  | OP_TRB                           00000080 
OP_ROL                           00000060  | MO_IZP                           00000081 
OP_ROR                           00000062  | OP_TSB                           00000082 
OP_RTI                           00000064  | MO_IAB                           00000083 
OP_RTS                           00000066  | OP_TSX                           00000084 
OP_SBC                           00000068  | MO_IZY                           00000085 
OP_SEC                           0000006A  | OP_TXA                           00000086 
OP_SED                           0000006C  | OP_TXS                           00000088 
OP_SEI                           0000006E  | MO_IZX                           00000089 
OP_SMB                           00000070  | OP_TYA                           0000008A 
OP_STA                           00000072  | MO_IAX                           0000008B 
OP_STP                           00000074  | OP_WAI                           0000008C 
OP_STX                           00000076  | A_REG                            000000F0 
OP_STY                           00000078  | X_REG                            000000F1 
OP_STZ                           0000007A  | Y_REG                            000000F2 
OP_TAX                           0000007C  | P_REG                            000000F3 
OP_TAY                           0000007E  | PC_REG                           000000F4 
OP_TRB                           00000080  | CMD_LEN                          000000F6 
OP_TSB                           00000082  | ADDR_S                           000000F7 
OP_TSX                           00000084  | ADDR_E                           000000F9 
OP_TXA                           00000086  | RX_HEAD                          000000FB 
OP_TXS                           00000088  | RX_TAIL                          000000FC 
OP_TYA                           0000008A  | TX_HEAD                          000000FD 
OP_WAI                           0000008C  | TX_TAIL                          000000FE 
PC_REG                           000000F4  | FLAGS                            000000FF 
PC_STR                           00000000  | STACK                            00000100 
PROMPT                           0000F2D6  | RX_BUFF                          00000200 
P_REG                            000000F3  | TX_BUFF                          00000240 
P_STR                            00000004  | BUFFER                           00000280 
REGISTERS                        0000F2A4  | OPCODES                          0000F000 
RESET                            0000FF00  | MODES                            0000F100 
RX_BUFF                          00000200  | MNEMONICS                        0000F200 
RX_COUNT                         0000FF4B  | BREAK                            0000F28C 
RX_HEAD                          000000FB  | REGISTERS                        0000F2A4 
RX_SIZE                          00000040  | COMMAND                          0000F2D4 
RX_TAIL                          000000FC  | PROMPT                           0000F2D6 
SHOW_STR                         0000F35C  | BACKSPACE                        0000F2F4 
SPACE                            0000F34D  | SQUAWK                           0000F314 
SPI_CTRL                         0000FE05  | HEX2                             0000F338 
SPI_DATA                         0000FE04  | HEX                              0000F341 
SPI_DVSR                         0000FE06  | SPACE                            0000F34D 
SPI_SLCT                         0000FE07  | CRLF                             0000F352 
SPI_STAT                         0000FE05  | SHOW_STR                         0000F35C 
SQUAWK                           0000F314  | STRINGS                          0000F368 
STACK                            00000100  | ACIA_DATA                        0000FE00 
STRINGS                          0000F368  | ACIA_STAT                        0000FE01 
TX_BUFF                          00000240  | ACIA_CMND                        0000FE02 
TX_HEAD                          000000FD  | ACIA_CTRL                        0000FE03 

Portable 65xx Assembler [16.05]

TX_SIZE                          00000040  | SPI_DATA                         0000FE04 
TX_TAIL                          000000FE  | SPI_CTRL                         0000FE05 
UART_RX                          0000FF2A  | SPI_STAT                         0000FE05 
UART_TX                          0000FF16  | SPI_DVSR                         0000FE06 
X_REG                            000000F1  | SPI_SLCT                         0000FE07 
X_STR                            0000000C  | RESET                            0000FF00 
Y_REG                            000000F2  | UART_TX                          0000FF16 
Y_STR                            00000010  | UART_RX                          0000FF2A 
__6501__                         00000000  | RX_COUNT                         0000FF4B 
__6502__                         00000000  | IRQ                              0000FF55 
__65816__                        00000000  | NOT_ACIA                         0000FFC0 
__65832__                        00000000  | BUMP_RX                          0000FFC4 
__65C02__                        00000001  | BUMP_TX                          0000FFC4 
__65SC02__                       00000000  | NMI                              0000FFCC 
