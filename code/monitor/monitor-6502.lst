
Portable 65xx Assembler [16.06]

                             ;===============================================================================
                             ;  ____  ____         __  ____   ___ ____                      
                             ; / ___|| __ )       / /_| ___| / _ \___ \                     
                             ; \___ \|  _ \ _____| '_ \___ \| | | |__) |                    
                             ;  ___) | |_) |_____| (_) |__) | |_| / __/                     
                             ; |____/|____/       \___/____/_\___/_____|   _ _              
                             ; | __ )  ___   ___ | |_  |  \/  | ___  _ __ (_) |_ ___  _ __  
                             ; |  _ \ / _ \ / _ \| __| | |\/| |/ _ \| '_ \| | __/ _ \| '__| 
                             ; | |_) | (_) | (_) | |_  | |  | | (_) | | | | | || (_) | |    
                             ; |____/ \___/ \___/ \__| |_|  |_|\___/|_| |_|_|\__\___/|_|    
                             ;                                                              
                             ;
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2014-2016 Andrew John Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;===============================================================================
                             ;
                             ; Notes:
                             ;
                             ;
                             ;-------------------------------------------------------------------------------
                             
                                             .6502
                                             .include "monitor.asm"
                             
                             ;===============================================================================
                             ; Virtual Peripherals
                             ;-------------------------------------------------------------------------------
                             
         0000FE00          = ACIA_DATA       .EQU    $FE00
         0000FE01          = ACIA_STAT       .EQU    $FE01
         0000FE02          = ACIA_CMND       .EQU    $FE02
         0000FE03          = ACIA_CTRL       .EQU    $FE03
                             
         0000FE04          = SPI_DATA        .EQU    $FE04
         0000FE05          = SPI_STAT        .EQU    $FE05
         0000FE05          = SPI_CTRL        .EQU    $FE05
         0000FE06          = SPI_DVSR        .EQU    $FE06
         0000FE07          = SPI_SLCT        .EQU    $FE07
                             
                             ;===============================================================================
                             ; ASCII Control Characters
                             ;-------------------------------------------------------------------------------
                             
         00000000          = NUL             .EQU    $00
         00000007          = BEL             .EQU    $07
         00000008          = BS              .EQU    $08
         00000009          = HT              .EQU    $09

Portable 65xx Assembler [16.06]

         0000000D          = CR              .EQU    $0D
         0000000A          = LF              .EQU    $0A
         00000011          = DC1             .EQU    $11                     ; XON
         00000013          = DC3             .EQU    $13                     ; XOFF
         0000001B          = ESC             .EQU    $1B
         0000007F          = DEL             .EQU    $7F
                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
         00000000          = OP_ERR          .EQU    $00
         00000002          = OP_ADC          .EQU    $02
         00000004          = OP_AND          .EQU    $04
         00000006          = OP_ASL          .EQU    $06
                                             .IF     __65C02__
                           - OP_BBR          .EQU    $08
                           - OP_BBS          .EQU    $0A
                                             .ENDIF
         0000000C          = OP_BCC          .EQU    $0C
         0000000E          = OP_BCS          .EQU    $0E
         00000010          = OP_BEQ          .EQU    $10
         00000012          = OP_BIT          .EQU    $12
         00000014          = OP_BNE          .EQU    $14
         00000016          = OP_BMI          .EQU    $16
         00000018          = OP_BPL          .EQU    $18
                                             .IF     __65C02__
                           - OP_BRA          .EQU    $1A
                                             .ENDIF
         0000001C          = OP_BRK          .EQU    $1C
         0000001E          = OP_BVC          .EQU    $1E
         00000020          = OP_BVS          .EQU    $20
         00000022          = OP_CLC          .EQU    $22
         00000024          = OP_CLD          .EQU    $24
         00000026          = OP_CLI          .EQU    $26
         00000028          = OP_CLV          .EQU    $28
         0000002A          = OP_CMP          .EQU    $2A
         0000002C          = OP_CPX          .EQU    $2C
         0000002E          = OP_CPY          .EQU    $2E
         00000030          = OP_DEC          .EQU    $30
         00000032          = OP_DEX          .EQU    $32
         00000034          = OP_DEY          .EQU    $34
         00000036          = OP_EOR          .EQU    $36
         00000038          = OP_INC          .EQU    $38
         0000003A          = OP_INX          .EQU    $3A
         0000003C          = OP_INY          .EQU    $3C
         0000003E          = OP_JMP          .EQU    $3E
         00000040          = OP_JSR          .EQU    $40
         00000042          = OP_LDA          .EQU    $42
         00000044          = OP_LDX          .EQU    $44
         00000046          = OP_LDY          .EQU    $46
         00000048          = OP_LSR          .EQU    $48
         0000004A          = OP_NOP          .EQU    $4A
         0000004C          = OP_ORA          .EQU    $4C
         0000004E          = OP_PHA          .EQU    $4E

Portable 65xx Assembler [16.06]

         00000050          = OP_PHP          .EQU    $50
                                             .IF     __65C02__
                           - OP_PHX          .EQU    $52
                           - OP_PHY          .EQU    $54
                                             .ENDIF
         00000056          = OP_PLA          .EQU    $56
         00000058          = OP_PLP          .EQU    $58
                                             .IF     __65C02__
                           - OP_PLX          .EQU    $5A
                           - OP_PLY          .EQU    $5C
                           - OP_RMB          .EQU    $5E
                                             .ENDIF
         00000060          = OP_ROL          .EQU    $60
         00000062          = OP_ROR          .EQU    $62
         00000064          = OP_RTI          .EQU    $64
         00000066          = OP_RTS          .EQU    $66
         00000068          = OP_SBC          .EQU    $68
         0000006A          = OP_SEC          .EQU    $6A
         0000006C          = OP_SED          .EQU    $6C
         0000006E          = OP_SEI          .EQU    $6E
                                             .IF     __65C02__
                           - OP_SMB          .EQU    $70
                                             .ENDIF
         00000072          = OP_STA          .EQU    $72
                                             .IF     __65C02__
                           - OP_STP          .EQU    $74
                                             .ENDIF
         00000076          = OP_STX          .EQU    $76
         00000078          = OP_STY          .EQU    $78
                                             .IF     __65C02__
                           - OP_STZ          .EQU    $7A
                                             .ENDIF
         0000007C          = OP_TAX          .EQU    $7C
         0000007E          = OP_TAY          .EQU    $7E
                                             .IF     __65C02__
                           - OP_TRB          .EQU    $80
                           - OP_TSB          .EQU    $82
                                             .ENDIF
         00000084          = OP_TSX          .EQU    $84
         00000086          = OP_TXA          .EQU    $86
         00000088          = OP_TXS          .EQU    $88
         0000008A          = OP_TYA          .EQU    $8A
                                             .IF     __65C02__
                           - OP_WAI          .EQU    $8C
                                             .ENDIF
                             
                             ; Bit patterns for addressing modes
                             
         00000080          = MB_IND          .EQU    %10000000
         00000040          = MB_REL          .EQU    %01000000
         00000020          = MB_BIT          .EQU    %00100000
                             
         00000000          = MB_IMP          .EQU    %00000000
         00000001          = MB_ZPG          .EQU    %00000001

Portable 65xx Assembler [16.06]

         00000002          = MB_IMM          .EQU    %00000010
         00000003          = MB_ABS          .EQU    %00000011
                             
         00000010          = MB_ACC          .EQU    %00010000
         00000008          = MB_XRG          .EQU    %00001000
         00000004          = MB_YRG          .EQU    %00000100
                             
                             ; Addressing modes
                             
                                             .IF     __65C02__
                           - MO_BIT          .EQU    MB_BIT       |MB_ZPG
                           - MO_BRL          .EQU    MB_BIT|MB_REL|MB_ZPG
                                             .ENDIF
         00000010          = MO_ACC          .EQU           MB_ACC|MB_IMP
         00000000          = MO_IMP          .EQU                  MB_IMP
         00000002          = MO_IMM          .EQU                  MB_IMM
         00000040          = MO_REL          .EQU                  MB_REL
         00000001          = MO_ZPG          .EQU                  MB_ZPG
         00000005          = MO_ZPX          .EQU           MB_YRG|MB_ZPG
         00000005          = MO_ZPY          .EQU           MB_YRG|MB_ZPG
                                             .IF     __65C02__
                           - MO_IZP          .EQU    MB_IND       |MB_ZPG
                                             .ENDIF
         00000089          = MO_IZX          .EQU    MB_IND|MB_XRG|MB_ZPG
         00000085          = MO_IZY          .EQU    MB_IND|MB_YRG|MB_ZPG
         00000003          = MO_ABS          .EQU                  MB_ABS
         0000000B          = MO_ABX          .EQU           MB_XRG|MB_ABS
         00000007          = MO_ABY          .EQU           MB_YRG|MB_ABS
         00000083          = MO_IAB          .EQU    MB_IND       |MB_ABS
                                             .IF     __65C02__
                           - MO_IAX          .EQU    MB_IND|MB_XRG|MB_ABS
                                             .ENDIF
                             
                             ;===============================================================================
                             ; Data Areas
                             ;-------------------------------------------------------------------------------
                             
                                             .PAGE0
                                             .ORG    $00F0
                             
00:00F0  00                : A_REG           .SPACE  1
00:00F1  00                : X_REG           .SPACE  1
00:00F2  00                : Y_REG           .SPACE  1
00:00F3  00                : P_REG           .SPACE  1
00:00F4  0000              : PC_REG          .SPACE  2
                             
00:00F6  00                : CMD_LEN         .SPACE  1                       ; Command buffer length
00:00F7  0000              : ADDR_S          .SPACE  2
00:00F9  0000              : ADDR_E          .SPACE  2
                             
00:00FB  0000              : TEMP            .SPACE  2
00:00FD  00                : COUNT           .SPACE  1
                             
                             ;-------------------------------------------------------------------------------

Portable 65xx Assembler [16.06]

                             
                                             .ORG    $00FE
                             
00:00FE  00                : IO_TEMP         .SPACE  1
                             
00:00FF  00                : FLAGS           .SPACE  1               ; I/O Flags for XON/XOFF
                             
         00000080          = FLAG_STOPPED    .EQU    $80
         00000040          = FLAG_STOP       .EQU    $40
                             
                             ;-------------------------------------------------------------------------------
                             
                                             .ORG    $0100
                             
00:0100  0000000000000000> : STACK           .SPACE  256
                             
                             ;===============================================================================
                             ; UART Buffers
                             ;-------------------------------------------------------------------------------
                             
         0000003E          = RX_SIZE         .EQU    62
         0000003E          = TX_SIZE         .EQU    62
                             
         00000080          = CMD_SIZE        .EQU    128
                             
                                             .BSS
                                             .ORG    $0200
                             
                             ; Communications buffer offsets
                             
00:0200  00                : RX_HEAD         .SPACE  1               ; UART recieve buffer offsets
00:0201  00                : RX_TAIL         .SPACE  1
00:0202  00                : TX_HEAD         .SPACE  1               ; UART transmit buffer offsets
00:0203  00                : TX_TAIL         .SPACE  1
                             
00:0204  0000000000000000> : RX_BUFF         .SPACE  RX_SIZE         ; UART recieve buffer
00:0242  0000000000000000> : TX_BUFF         .SPACE  TX_SIZE         ; UART transmit buffer
                             
00:0280  0000000000000000> : BUFFER          .SPACE  CMD_SIZE
                             
                             
                             
                                             .CODE
                                             .ORG    $F000
                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
                                             .IF     __6502__
                             OPCODES:
00:F000  1C4C0000004C0600  :                 .BYTE   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 0
00:F008  504C0600004C0600  :                 .BYTE   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
00:F010  184C0000004C0600  :                 .BYTE   OP_BPL,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 1
00:F018  224C3800004C0600  :                 .BYTE   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR

Portable 65xx Assembler [16.06]

00:F020  4004000012046000  :                 .BYTE   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 2
00:F028  5804600012046000  :                 .BYTE   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
00:F030  1604000012046000  :                 .BYTE   OP_BMI,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 3
00:F038  6A04300012046000  :                 .BYTE   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
00:F040  6436000000364800  :                 .BYTE   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 4
00:F048  4E3648003E364800  :                 .BYTE   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_ERR
00:F050  1E36000000364800  :                 .BYTE   OP_BVC,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 5
00:F058  2636000000364800  :                 .BYTE   OP_CLI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR
00:F060  6602000000026200  :                 .BYTE   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 6
00:F068  560262003E026200  :                 .BYTE   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_ERR
00:F070  2002000000026200  :                 .BYTE   OP_BVS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 7
00:F078  6E02000000026200  :                 .BYTE   OP_SEI,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR
00:F080  0072000078727600  :                 .BYTE   OP_ERR,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 8
00:F088  3412860078727600  :                 .BYTE   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR
00:F090  0C72000078727600  :                 .BYTE   OP_BCC,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 9
00:F098  8A72880000720000  :                 .BYTE   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_ERR,OP_STA,OP_ERR,OP_ERR
00:F0A0  4642440046424400  :                 .BYTE   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; A
00:F0A8  7E427C0046424400  :                 .BYTE   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
00:F0B0  0E42000046424400  :                 .BYTE   OP_BCS,OP_LDA,OP_ERR,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; B
00:F0B8  2842840046424400  :                 .BYTE   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
00:F0C0  2E2A00002E2A3000  :                 .BYTE   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR ; C
00:F0C8  3C2A32002E2A3000  :                 .BYTE   OP_INY,OP_CMP,OP_DEX,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR
00:F0D0  142A0000002A3000  :                 .BYTE   OP_BNE,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR ; D
00:F0D8  242A0000002A3000  :                 .BYTE   OP_CLD,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR
00:F0E0  2C6800002C683800  :                 .BYTE   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR ; E
00:F0E8  3A684A002C683800  :                 .BYTE   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR
00:F0F0  1068000000683800  :                 .BYTE   OP_BEQ,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR ; F
00:F0F8  6C68000000683800  :                 .BYTE   OP_SED,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR
                             
                             MODES:
00:F100  0289020000010100  :                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 0
00:F108  0002100000030300  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_IMP
00:F110  4085000000050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 1
00:F118  00071000000B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
00:F120  0389000001010100  :                 .BYTE   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
00:F128  0002100003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F130  4085000005050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
00:F138  000710000B0B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
00:F140  0089000000010100  :                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
00:F148  0002100003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F150  4085000000050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
00:F158  00070000000B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
00:F160  0089000000010100  :                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 6
00:F168  0002100083030300  :                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
00:F170  4085000000050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 7
00:F178  00070000000B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
00:F180  0089000001010100  :                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
00:F188  0002000003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F190  4085000005050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
00:F198  00070000000B0000  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_IMP,MO_IMP
00:F1A0  0289020001010100  :                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
00:F1A8  0002000003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F1B0  4085000005050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
00:F1B8  000700000B0B0700  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP

Portable 65xx Assembler [16.06]

00:F1C0  0289000001010100  :                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
00:F1C8  0002000003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F1D0  4085000000050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
00:F1D8  00070000000B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
00:F1E0  0289000001010100  :                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E
00:F1E8  0002000003030300  :                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
00:F1F0  4085000000050500  :                 .BYTE   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
00:F1F8  00070000000B0B00  :                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                             .ENDIF
                             
                             ;-------------------------------------------------------------------------------
                             
                                             .IF     __65C02__
                           - OPCODES:
                           -                 .BYTE   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_RMB ; 0
                           -                 .BYTE   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_BBR
                           -                 .BYTE   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_RMB ; 1
                           -                 .BYTE   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_BBR
                           -                 .BYTE   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 2
                           -                 .BYTE   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
                           -                 .BYTE   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 3
                           -                 .BYTE   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
                           -                 .BYTE   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 4
                           -                 .BYTE   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_BBR
                           -                 .BYTE   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 5
                           -                 .BYTE   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_BBR
                           -                 .BYTE   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 6
                           -                 .BYTE   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
                           -                 .BYTE   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 7
                           -                 .BYTE   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
                           -                 .BYTE   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 8
                           -                 .BYTE   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_BBS
                           -                 .BYTE   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 9
                           -                 .BYTE   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_BBS
                           -                 .BYTE   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; A
                           -                 .BYTE   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
                           -                 .BYTE   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; B
                           -                 .BYTE   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
                           -                 .BYTE   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_SMB ; C
                           -                 .BYTE   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_BBS
                           -                 .BYTE   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_SMB ; D
                           -                 .BYTE   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_BBS
                           -                 .BYTE   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_SMB ; E
                           -                 .BYTE   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_BBS
                           -                 .BYTE   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_SMB ; F
                           -                 .BYTE   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_BBS
                             
                           - MODES:
                           -                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 0
                           -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_ZPG ; 1
                           -                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 2
                           -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL

Portable 65xx Assembler [16.06]

                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 3
                           -                 .BYTE   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG ; 4
                           -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; 5
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 6
                           -                 .BYTE   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 7
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 8
                           -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; 9
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; A
                           -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; B
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_BRL
                           -                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; C
                           -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; D
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                           -                 .BYTE   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; E
                           -                 .BYTE   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
                           -                 .BYTE   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; F
                           -                 .BYTE   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                                             .ENDIF
                             
                             ;-------------------------------------------------------------------------------
                             
                             SQUEEZE         .MACRO  CH1,CH2,CH3
                                             .WORD   ((((CH3 & $1F) << 5)|(CH2 & $1F)) << 5)|(CH1 & $1F)
                                             .ENDM
                             
                             MNEMONICS:
                                             SQUEEZE '?','?','?'
00:F200  FF7F              +                 .WORD   (((('?' & $1F) << 5)|('?' & $1F)) << 5)|('?' & $1F)
                                             SQUEEZE 'A','D','C'
00:F202  810C              +                 .WORD   (((('C' & $1F) << 5)|('D' & $1F)) << 5)|('A' & $1F)
                                             SQUEEZE 'A','N','D'
00:F204  C111              +                 .WORD   (((('D' & $1F) << 5)|('N' & $1F)) << 5)|('A' & $1F)
                                             SQUEEZE 'A','S','L'
00:F206  6132              +                 .WORD   (((('L' & $1F) << 5)|('S' & $1F)) << 5)|('A' & $1F)
                                             SQUEEZE 'B','B','R'
00:F208  4248              +                 .WORD   (((('R' & $1F) << 5)|('B' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','B','S'
00:F20A  424C              +                 .WORD   (((('S' & $1F) << 5)|('B' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','C','C'
00:F20C  620C              +                 .WORD   (((('C' & $1F) << 5)|('C' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','C','S'
00:F20E  624C              +                 .WORD   (((('S' & $1F) << 5)|('C' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','E','Q'
00:F210  A244              +                 .WORD   (((('Q' & $1F) << 5)|('E' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','I','T'

Portable 65xx Assembler [16.06]

00:F212  2251              +                 .WORD   (((('T' & $1F) << 5)|('I' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','N','E'
00:F214  C215              +                 .WORD   (((('E' & $1F) << 5)|('N' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','M','I'
00:F216  A225              +                 .WORD   (((('I' & $1F) << 5)|('M' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','P','L'
00:F218  0232              +                 .WORD   (((('L' & $1F) << 5)|('P' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','R','A'
00:F21A  4206              +                 .WORD   (((('A' & $1F) << 5)|('R' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','R','K'
00:F21C  422E              +                 .WORD   (((('K' & $1F) << 5)|('R' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','V','C'
00:F21E  C20E              +                 .WORD   (((('C' & $1F) << 5)|('V' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'B','V','S'
00:F220  C24E              +                 .WORD   (((('S' & $1F) << 5)|('V' & $1F)) << 5)|('B' & $1F)
                                             SQUEEZE 'C','L','C'
00:F222  830D              +                 .WORD   (((('C' & $1F) << 5)|('L' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','L','D'
00:F224  8311              +                 .WORD   (((('D' & $1F) << 5)|('L' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','L','I'
00:F226  8325              +                 .WORD   (((('I' & $1F) << 5)|('L' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','L','V'
00:F228  8359              +                 .WORD   (((('V' & $1F) << 5)|('L' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','M','P'
00:F22A  A341              +                 .WORD   (((('P' & $1F) << 5)|('M' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','P','X'
00:F22C  0362              +                 .WORD   (((('X' & $1F) << 5)|('P' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'C','P','Y'
00:F22E  0366              +                 .WORD   (((('Y' & $1F) << 5)|('P' & $1F)) << 5)|('C' & $1F)
                                             SQUEEZE 'D','E','C'
00:F230  A40C              +                 .WORD   (((('C' & $1F) << 5)|('E' & $1F)) << 5)|('D' & $1F)
                                             SQUEEZE 'D','E','X'
00:F232  A460              +                 .WORD   (((('X' & $1F) << 5)|('E' & $1F)) << 5)|('D' & $1F)
                                             SQUEEZE 'D','E','Y'
00:F234  A464              +                 .WORD   (((('Y' & $1F) << 5)|('E' & $1F)) << 5)|('D' & $1F)
                                             SQUEEZE 'E','O','R'
00:F236  E549              +                 .WORD   (((('R' & $1F) << 5)|('O' & $1F)) << 5)|('E' & $1F)
                                             SQUEEZE 'I','N','C'
00:F238  C90D              +                 .WORD   (((('C' & $1F) << 5)|('N' & $1F)) << 5)|('I' & $1F)
                                             SQUEEZE 'I','N','X'
00:F23A  C961              +                 .WORD   (((('X' & $1F) << 5)|('N' & $1F)) << 5)|('I' & $1F)
                                             SQUEEZE 'I','N','Y'
00:F23C  C965              +                 .WORD   (((('Y' & $1F) << 5)|('N' & $1F)) << 5)|('I' & $1F)
                                             SQUEEZE 'J','M','P'
00:F23E  AA41              +                 .WORD   (((('P' & $1F) << 5)|('M' & $1F)) << 5)|('J' & $1F)
                                             SQUEEZE 'J','S','R'
00:F240  6A4A              +                 .WORD   (((('R' & $1F) << 5)|('S' & $1F)) << 5)|('J' & $1F)
                                             SQUEEZE 'L','D','A'
00:F242  8C04              +                 .WORD   (((('A' & $1F) << 5)|('D' & $1F)) << 5)|('L' & $1F)
                                             SQUEEZE 'L','D','X'
00:F244  8C60              +                 .WORD   (((('X' & $1F) << 5)|('D' & $1F)) << 5)|('L' & $1F)
                                             SQUEEZE 'L','D','Y'
00:F246  8C64              +                 .WORD   (((('Y' & $1F) << 5)|('D' & $1F)) << 5)|('L' & $1F)
                                             SQUEEZE 'L','S','R'

Portable 65xx Assembler [16.06]

00:F248  6C4A              +                 .WORD   (((('R' & $1F) << 5)|('S' & $1F)) << 5)|('L' & $1F)
                                             SQUEEZE 'N','O','P'
00:F24A  EE41              +                 .WORD   (((('P' & $1F) << 5)|('O' & $1F)) << 5)|('N' & $1F)
                                             SQUEEZE 'O','R','A'
00:F24C  4F06              +                 .WORD   (((('A' & $1F) << 5)|('R' & $1F)) << 5)|('O' & $1F)
                                             SQUEEZE 'P','H','A'
00:F24E  1005              +                 .WORD   (((('A' & $1F) << 5)|('H' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','H','P'
00:F250  1041              +                 .WORD   (((('P' & $1F) << 5)|('H' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','H','X'
00:F252  1061              +                 .WORD   (((('X' & $1F) << 5)|('H' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','H','Y'
00:F254  1065              +                 .WORD   (((('Y' & $1F) << 5)|('H' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','L','A'
00:F256  9005              +                 .WORD   (((('A' & $1F) << 5)|('L' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','L','P'
00:F258  9041              +                 .WORD   (((('P' & $1F) << 5)|('L' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','L','X'
00:F25A  9061              +                 .WORD   (((('X' & $1F) << 5)|('L' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'P','L','Y'
00:F25C  9065              +                 .WORD   (((('Y' & $1F) << 5)|('L' & $1F)) << 5)|('P' & $1F)
                                             SQUEEZE 'R','M','B'
00:F25E  B209              +                 .WORD   (((('B' & $1F) << 5)|('M' & $1F)) << 5)|('R' & $1F)
                                             SQUEEZE 'R','O','L'
00:F260  F231              +                 .WORD   (((('L' & $1F) << 5)|('O' & $1F)) << 5)|('R' & $1F)
                                             SQUEEZE 'R','O','R'
00:F262  F249              +                 .WORD   (((('R' & $1F) << 5)|('O' & $1F)) << 5)|('R' & $1F)
                                             SQUEEZE 'R','T','I'
00:F264  9226              +                 .WORD   (((('I' & $1F) << 5)|('T' & $1F)) << 5)|('R' & $1F)
                                             SQUEEZE 'R','T','S'
00:F266  924E              +                 .WORD   (((('S' & $1F) << 5)|('T' & $1F)) << 5)|('R' & $1F)
                                             SQUEEZE 'S','B','C'
00:F268  530C              +                 .WORD   (((('C' & $1F) << 5)|('B' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','E','C'
00:F26A  B30C              +                 .WORD   (((('C' & $1F) << 5)|('E' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','E','D'
00:F26C  B310              +                 .WORD   (((('D' & $1F) << 5)|('E' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','E','I'
00:F26E  B324              +                 .WORD   (((('I' & $1F) << 5)|('E' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','M','B'
00:F270  B309              +                 .WORD   (((('B' & $1F) << 5)|('M' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','T','A'
00:F272  9306              +                 .WORD   (((('A' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','T','P'
00:F274  9342              +                 .WORD   (((('P' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','T','X'
00:F276  9362              +                 .WORD   (((('X' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','T','Y'
00:F278  9366              +                 .WORD   (((('Y' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'S','T','Z'
00:F27A  936A              +                 .WORD   (((('Z' & $1F) << 5)|('T' & $1F)) << 5)|('S' & $1F)
                                             SQUEEZE 'T','A','X'
00:F27C  3460              +                 .WORD   (((('X' & $1F) << 5)|('A' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','A','Y'

Portable 65xx Assembler [16.06]

00:F27E  3464              +                 .WORD   (((('Y' & $1F) << 5)|('A' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','R','B'
00:F280  540A              +                 .WORD   (((('B' & $1F) << 5)|('R' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','S','B'
00:F282  740A              +                 .WORD   (((('B' & $1F) << 5)|('S' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','S','X'
00:F284  7462              +                 .WORD   (((('X' & $1F) << 5)|('S' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','X','A'
00:F286  1407              +                 .WORD   (((('A' & $1F) << 5)|('X' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','X','S'
00:F288  144F              +                 .WORD   (((('S' & $1F) << 5)|('X' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'T','Y','A'
00:F28A  3407              +                 .WORD   (((('A' & $1F) << 5)|('Y' & $1F)) << 5)|('T' & $1F)
                                             SQUEEZE 'W','A','I'
00:F28C  3724              +                 .WORD   (((('I' & $1F) << 5)|('A' & $1F)) << 5)|('W' & $1F)
                             
                             ;===============================================================================
                             ;
                             ;-------------------------------------------------------------------------------
                             
                             BREAK:
00:F28E  58                :                 CLI                     ; Allow interrupts
00:F28F  68                :                 PLA
00:F290  85F2              :                 STA     Y_REG
00:F292  68                :                 PLA
00:F293  85F1              :                 STA     X_REG
00:F295  68                :                 PLA
00:F296  85F0              :                 STA     A_REG
00:F298  68                :                 PLA
00:F299  85F3              :                 STA     P_REG
00:F29B  38                :                 SEC
00:F29C  68                :                 PLA
00:F29D  E902              :                 SBC     #2
00:F29F  85F4              :                 STA     PC_REG+0
00:F2A1  68                :                 PLA
00:F2A2  E900              :                 SBC     #0
00:F2A4  85F5              :                 STA     PC_REG+1
                             
                             REGISTERS:
00:F2A6  2089F6            :                 JSR     CRLF
00:F2A9  A200              :                 LDX     #PC_STR
00:F2AB  2093F6            :                 JSR     SHOW_STR
00:F2AE  A5F5              :                 LDA     PC_REG+1
00:F2B0  2063F6            :                 JSR     HEX2
00:F2B3  A5F4              :                 LDA     PC_REG+0
00:F2B5  2063F6            :                 JSR     HEX2
                             
00:F2B8  A20D              :                 LDX     #A_STR
00:F2BA  2093F6            :                 JSR     SHOW_STR
00:F2BD  A5F0              :                 LDA     A_REG
00:F2BF  2063F6            :                 JSR     HEX2
                             
00:F2C2  A211              :                 LDX     #X_STR
00:F2C4  2093F6            :                 JSR     SHOW_STR

Portable 65xx Assembler [16.06]

00:F2C7  A5F1              :                 LDA     X_REG
00:F2C9  2063F6            :                 JSR     HEX2
                             
00:F2CC  A215              :                 LDX     #Y_STR
00:F2CE  2093F6            :                 JSR     SHOW_STR
00:F2D1  A5F2              :                 LDA     Y_REG
00:F2D3  2063F6            :                 JSR     HEX2
                                             
00:F2D6  A209              :                 LDX     #P_STR
00:F2D8  2093F6            :                 JSR     SHOW_STR
00:F2DB  A207              :                 LDX     #7
                                             REPEAT
00:F2DD  A02E              :                  LDY    #'.'
00:F2DF  BD7EF7            :                  LDA    BITS,X
00:F2E2  24F3              :                  BIT    P_REG
00:F2E4  F003              :                  IF     NE
00:F2E6  BC76F7            :                   LDY   FLAG,X
                                              ENDIF
00:F2E9  98                :                  TYA
00:F2EA  201EFF            :                  JSR    UART_TX
00:F2ED  CA                :                  DEX
00:F2EE  10ED              :                 UNTIL MI                  
                                             
00:F2F0  A204              :                 LDX     #SP_STR
00:F2F2  2093F6            :                 JSR     SHOW_STR
00:F2F5  BA                :                 TSX
00:F2F6  8A                :                 TXA
00:F2F7  2063F6            :                 JSR     HEX2
                             
                             COMMAND:
                                             .IF     __65C02__
                           -                 STZ     CMD_LEN         ; Mark the buffer as empty
                                             .ELSE
00:F2FA  A900              :                 LDA     #0              ; Mark the buffer as empty
00:F2FC  85F6              :                 STA     CMD_LEN
                                             .ENDIF
                             
                             PROMPT:
00:F2FE  2089F6            :                 JSR     CRLF            ; Move cursor to next line
00:F301  A92E              :                 LDA     #'.'            ; And output the prompt
00:F303  201EFF            :                 JSR     UART_TX
                             
00:F306  A200              :                 LDX     #0
                                             REPEAT
00:F308  E4F6              :                  CPX    CMD_LEN         ; Any saved characters to display?
00:F30A  F00A              :                  BREAK  EQ              ; No
00:F30C  BD8002            :                  LDA    BUFFER,X        ; Yes, print from the buffer
00:F30F  201EFF            :                  JSR    UART_TX
00:F312  E8                :                  INX
00:F313  4C08F3            :                 FOREVER
                                             
00:F316  2018FF            :                 JSR     XON
                                             REPEAT
00:F319  203BFF            :                  JSR    UART_RX         ; Wait for some user input

Portable 65xx Assembler [16.06]

                                              
00:F31C  C91B              :                  CMP    #ESC            ; Cancel input?
00:F31E  D002              :                  IF     EQ
00:F320  F0D8              :                   BEQ   COMMAND         ; Yes
                                              ENDIF
                             
00:F322  C908              :                  CMP    #BS             ; Backspace?
00:F324  D013              :                  IF     EQ
00:F326  E000              : BACKSPACE:        CPX   #0              ; Anything in the buffer?
00:F328  F00C              :                   IF    NE
00:F32A  48                :                    PHA                  ; Erase the last character
00:F32B  201EFF            :                    JSR  UART_TX
00:F32E  207FF6            :                    JSR  SPACE
00:F331  68                :                    PLA
00:F332  201EFF            :                    JSR  UART_TX
00:F335  CA                :                    DEX
                                               ENDIF
00:F336  4C19F3            :                   CONTINUE
                                              ENDIF
                             
00:F339  C90D              :                  CMP    #CR             ; End of command entry?
00:F33B  F024              :                  BREAK  EQ              ; Yes
                             
00:F33D  C97F              :                  CMP    #DEL            ; Convert DEL into BS
00:F33F  D004              :                  IF     EQ
00:F341  A908              :                   LDA   #BS
00:F343  D0E1              :                   BNE   BACKSPACE
                                              ENDIF
00:F345  9008              :                  IF     CS              ; In the range $7F-$FF?
00:F347  A907              : SQUAWK:           LDA   #BEL            ; Yes, squawk!
00:F349  201EFF            :                   JSR   UART_TX
00:F34C  4C19F3            :                   CONTINUE
                                              ENDIF
                             
00:F34F  C920              :                  CMP    #' '            ; In the range $00-$1F?
00:F351  90F4              :                  BCC    SQUAWK          ; Yes, squawk!
                             
00:F353  E07F              :                  CPX    #CMD_SIZE-1     ; Command buffer full?
00:F355  B0F0              :                  BCS    SQUAWK          ; Yes, squawk!
                             
00:F357  9D8002            :                  STA    BUFFER,X        ; Save the character
00:F35A  E8                :                  INX                    ; Bump the count
00:F35B  201EFF            :                  JSR    UART_TX         ; And echo to terminal
00:F35E  4C19F3            :                 FOREVER
00:F361  201CFF            :                 JSR     XOFF
                             
00:F364  86F6              :                 STX     CMD_LEN         ; Save the command length
00:F366  A200              :                 LDX     #0              ; Set character offset to start
00:F368  20D0F4            :                 JSR     SKIP_CHAR       ; And get first character
00:F36B  B08D              :                 BCS     COMMAND
                             
                             ;===============================================================================
                             ; 'A' - Assemble
                             ;-------------------------------------------------------------------------------

Portable 65xx Assembler [16.06]

                             
00:F36D  C941              :                 CMP     #'A'
00:F36F  D000              :                 IF      EQ
                                             ENDIF
                             
                             ;===============================================================================
                             ; 'D' - Disassemble Memory
                             ;-------------------------------------------------------------------------------
                             
00:F371  C944              :                 CMP     #'D'
00:F373  D036              :                 IF      EQ
00:F375  20DCF4            :                  JSR    GET_WORD
00:F378  B02E              :                  IF     CC
00:F37A  2066F4            :                   JSR   SET_ADDR_S
00:F37D  206FF4            :                   JSR   SET_ADDR_E
00:F380  20DCF4            :                   JSR   GET_WORD
00:F383  B006              :                   IF    CC
00:F385  206FF4            :                    JSR  SET_ADDR_E
00:F388  4C8DF3            :                   ELSE
00:F38B  E6FA              :                    INC  ADDR_E+1
                                               ENDIF
                                               
                                               REPEAT
00:F38D  2089F6            :                    JSR  CRLF            ; Print the memory address
00:F390  A5F8              :                    LDA  ADDR_S+1
00:F392  2063F6            :                    JSR  HEX2
00:F395  A5F7              :                    LDA  ADDR_S+0
00:F397  2063F6            :                    JSR  HEX2
                                                
00:F39A  2042F5            :                    JSR  DISASSEMBLE
00:F39D  2078F4            :                    JSR  BUMP_ADDR                  
00:F3A0  2082F4            :                    JSR  CHECK_END
00:F3A3  30E8              :                   UNTIL PL
00:F3A5  4CFAF2            :                   JMP   COMMAND
                                              ENDIF
00:F3A8  4C5EF4            :                  JMP    ERROR           
                                             ENDIF
                                             
                             ;===============================================================================
                             ; 'G' - Go
                             ;-------------------------------------------------------------------------------
                             
00:F3AB  C947              :                 CMP     #'G'
00:F3AD  D010              :                 IF      EQ
                             
00:F3AF  A5F5              :                  LDA    PC_REG+1        ; Push the target address
00:F3B1  48                :                  PHA
00:F3B2  A5F4              :                  LDA    PC_REG+0
00:F3B4  48                :                  PHA
00:F3B5  A5F3              :                  LDA    P_REG           ; And status flags
00:F3B7  48                :                  PHA
00:F3B8  A5F0              :                  LDA    A_REG           ; Reload A, X and Y
00:F3BA  A6F1              :                  LDX    X_REG
00:F3BC  A4F2              :                  LDY    Y_REG

Portable 65xx Assembler [16.06]

00:F3BE  40                :                  RTI                    ; Then go to code
                                             ENDIF
                             
                             ;===============================================================================
                             ; 'M' - Show Memory
                             ;-------------------------------------------------------------------------------                
                             
00:F3BF  C94D              :                 CMP     #'M'
00:F3C1  D05F              :                 IF      EQ
00:F3C3  20DCF4            :                  JSR    GET_WORD
00:F3C6  B057              :                  IF     CC
00:F3C8  2066F4            :                   JSR   SET_ADDR_S
00:F3CB  206FF4            :                   JSR   SET_ADDR_E
00:F3CE  20DCF4            :                   JSR   GET_WORD
00:F3D1  B006              :                   IF    CC
00:F3D3  206FF4            :                    JSR  SET_ADDR_E
00:F3D6  4CDBF3            :                   ELSE
00:F3D9  E6FA              :                    INC  ADDR_E+1
                                               ENDIF
                                               
                                               REPEAT
00:F3DB  2089F6            :                    JSR  CRLF            ; Print the memory address
00:F3DE  A5F8              :                    LDA  ADDR_S+1
00:F3E0  2063F6            :                    JSR  HEX2
00:F3E3  A5F7              :                    LDA  ADDR_S+0
00:F3E5  2063F6            :                    JSR  HEX2
                                                
00:F3E8  A000              :                    LDY  #0              ; Dump 16 bytes of data
                                                REPEAT
00:F3EA  207FF6            :                     JSR SPACE
00:F3ED  B1F7              :                     LDA (ADDR_S),Y
00:F3EF  C8                :                     INY
00:F3F0  2063F6            :                     JSR HEX2
00:F3F3  C010              :                     CPY #16
00:F3F5  D0F3              :                    UNTIL EQ
                                                
00:F3F7  207FF6            :                    JSR  SPACE           ; Then show as characters
00:F3FA  2084F6            :                    JSR  BAR
00:F3FD  A000              :                    LDY  #0
                                                REPEAT
00:F3FF  B1F7              :                     LDA (ADDR_S),Y
00:F401  C8                :                     INY
00:F402  2036F5            :                     JSR IS_PRINTABLE
00:F405  B002              :                     IF CC
00:F407  A92E              :                      LDA #'.'
                                                 ENDIF
00:F409  201EFF            :                     JSR UART_TX
00:F40C  C010              :                     CPY #16
00:F40E  D0EF              :                    UNTIL EQ
00:F410  2084F6            :                    JSR  BAR
                                                
00:F413  98                :                    TYA
00:F414  2078F4            :                    JSR  BUMP_ADDR
00:F417  2082F4            :                    JSR  CHECK_END

Portable 65xx Assembler [16.06]

00:F41A  30BF              :                   UNTIL PL
00:F41C  4CFAF2            :                   JMP   COMMAND
                                              ENDIF
00:F41F  4C5EF4            :                  JMP    ERROR
                                             ENDIF
                             
                             ;===============================================================================
                             ; 'R' - Show Registers
                             ;-------------------------------------------------------------------------------
                             
00:F422  C952              :                 CMP     #'R'
00:F424  D003              :                 IF      EQ
00:F426  4CA6F2            :                  JMP    REGISTERS
                                             ENDIF
                                             
                             ;===============================================================================
                             ; 'S' - Load SREC
                             ;-------------------------------------------------------------------------------
                             
00:F429  C953              :                 CMP     #'S'
00:F42B  D000              :                 IF      EQ
                                             ENDIF
                                             
                             ;===============================================================================
                             ; 'T' - Trace
                             ;-------------------------------------------------------------------------------
                             
00:F42D  C954              :                 CMP     #'T'
00:F42F  D000              :                 IF      EQ
                                             ENDIF
                                             
                             ;===============================================================================
                             ; 'W' - Write Memory
                             ;-------------------------------------------------------------------------------
                             
00:F431  C957              :                 CMP     #'W'
00:F433  D020              :                 IF      EQ
00:F435  20DCF4            :                  JSR    GET_WORD        ; Get the target address
00:F438  B018              :                  IF     CC
00:F43A  2066F4            :                   JSR   SET_ADDR_S      ; Copy to start address
00:F43D  20E0F4            :                   JSR   GET_BYTE        ; Get the value
00:F440  B010              :                   IF    CC
00:F442  A000              :                    LDY  #0              ; Write to  memory
00:F444  A5FB              :                    LDA  TEMP+0
00:F446  91F7              :                    STA  (ADDR_S),Y
00:F448  A901              :                    LDA  #1              ; Increment address
00:F44A  2078F4            :                    JSR  BUMP_ADDR
00:F44D  A957              :                    LDA  #'W'            ; Create prompt for next byte
00:F44F  4C8CF4            :                    JMP  SET_PROMPT
                                               ENDIF
                                              ENDIF
00:F452  4C5EF4            :                  JMP    ERROR           ; Handle syntax errors
                                             ENDIF
                                             

Portable 65xx Assembler [16.06]

                             ;===============================================================================
                             ; '?' - Display Help
                             ;-------------------------------------------------------------------------------
                             
00:F455  C93F              :                 CMP     #'?'
00:F457  D005              :                 IF      EQ
00:F459  A21D              :                  LDX    #HLP_STR
00:F45B  4C60F4            :                 ELSE
00:F45E  A219              : ERROR:           LDX    #ERR_STR
                                             ENDIF
00:F460  2093F6            :                 JSR     SHOW_STR
00:F463  4CFAF2            :                 JMP     COMMAND
                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
                             SET_ADDR_S:
00:F466  A5FB              :                 LDA     TEMP+0
00:F468  85F7              :                 STA     ADDR_S+0
00:F46A  A5FC              :                 LDA     TEMP+1
00:F46C  85F8              :                 STA     ADDR_S+1
00:F46E  60                :                 RTS
                             
                             SET_ADDR_E:
00:F46F  A5FB              :                 LDA     TEMP+0
00:F471  85F9              :                 STA     ADDR_E+0
00:F473  A5FC              :                 LDA     TEMP+1
00:F475  85FA              :                 STA     ADDR_E+1
00:F477  60                :                 RTS
                             
                             BUMP_ADDR:
00:F478  18                :                 CLC
00:F479  65F7              :                 ADC     ADDR_S+0
00:F47B  85F7              :                 STA     ADDR_S+0
00:F47D  9002              :                 IF      CS
00:F47F  E6F8              :                  INC    ADDR_S+1
                                             ENDIF
00:F481  60                :                 RTS
                                             
                             CHECK_END:
00:F482  38                :                 SEC
00:F483  A5F7              :                 LDA     ADDR_S+0
00:F485  E5F9              :                 SBC     ADDR_E+0
00:F487  A5F8              :                 LDA     ADDR_S+1
00:F489  E5FA              :                 SBC     ADDR_E+1
00:F48B  60                :                 RTS
                             
                             ; Create a prompt string in the command buffer for the command in A using the
                             ; current value of the starting address.
                             
                             SET_PROMPT:
00:F48C  A200              :                 LDX     #0              ; Clear buffer and add command letter
00:F48E  20B4F4            :                 JSR     APPEND_CHAR
00:F491  A920              :                 LDA     #' '            ; Then a space

Portable 65xx Assembler [16.06]

00:F493  20B4F4            :                 JSR     APPEND_CHAR
                                             
00:F496  A5F8              :                 LDA     ADDR_S+1        ; Followed by the address
00:F498  20A8F4            :                 JSR     APPEND_HEX2
00:F49B  A5F7              :                 LDA     ADDR_S+0
00:F49D  20A8F4            :                 JSR     APPEND_HEX2
00:F4A0  A920              :                 LDA     #' '            ; And another space
00:F4A2  20B4F4            :                 JSR     APPEND_CHAR
00:F4A5  4CFEF2            :                 JMP     PROMPT          ; Then output it
                             
                             ; Convert the byte in A into hexadecimal digits and append to the command buffer.               
                                             
                             APPEND_HEX2:
00:F4A8  48                :                 PHA
00:F4A9  4A                :                 LSR     A
00:F4AA  4A                :                 LSR     A
00:F4AB  4A                :                 LSR     A
00:F4AC  4A                :                 LSR     A
00:F4AD  20B1F4            :                 JSR     APPEND_HEX
00:F4B0  68                :                 PLA
                             APPEND_HEX:
00:F4B1  2072F6            :                 JSR     TO_HEX
                             
                             ; Append the character in A to the command buffer to create the next prompt
                             ; string.
                             
                             APPEND_CHAR:
00:F4B4  9D8002            :                 STA     BUFFER,X
00:F4B7  E8                :                 INX
00:F4B8  86F6              :                 STX     CMD_LEN
00:F4BA  60                :                 RTS
                                                             
                             ;===============================================================================
                             ; Parsing Utilities
                             ;-------------------------------------------------------------------------------
                             
                             ; Get the next characater from the command buffer indicated by the X register
                             ; and convert it to UPPER case. If the carry is set then the end of the buffer
                             ; has been reached.
                             
                             NEXT_CHAR:
00:F4BB  E4F6              :                 CPX     CMD_LEN         ; Reached end of buffer
00:F4BD  9001              :                 IF      CS
00:F4BF  60                :                  RTS
                                             ENDIF
00:F4C0  BD8002            :                 LDA     BUFFER,X
00:F4C3  E8                :                 INX
                             
                             ; Convert the character in A to upper case.
                             
                             TO_UPPER:
00:F4C4  C961              :                 CMP     #'a'
00:F4C6  9006              :                 IF      CS
00:F4C8  C97B              :                  CMP    #'z'+1

Portable 65xx Assembler [16.06]

00:F4CA  B002              :                  IF     CC
00:F4CC  295F              :                   AND   #$5F
                                              ENDIF
                                             ENDIF
00:F4CE  18                :                 CLC
00:F4CF  60                :                 RTS
                                             
                             SKIP_CHAR:
                                             REPEAT
00:F4D0  20BBF4            :                  JSR    NEXT_CHAR
00:F4D3  9001              :                  IF     CS
00:F4D5  60                :                   RTS
                                              ENDIF
00:F4D6  C920              :                  CMP    #' '
00:F4D8  F0F6              :                 UNTIL   NE
00:F4DA  18                :                 CLC
00:F4DB  60                :                 RTS
                             
                             ; Parse a word from the command buffer and store it at 0,Y. Return if the
                             ; carry set if there is a syntax error.
                             
                             GET_WORD:
00:F4DC  A004              :                 LDY     #4              ; Set maximim number of nybbles
00:F4DE  D002              :                 BNE     GET_BYTE+2
                             
                             
                             ; Parse a word from the command buffer and store it at 0,Y. Return if the
                             ; carry set if there is a syntax error.
                             
                             GET_BYTE:
00:F4E0  A002              :                 LDY     #2              ; Set maximum number of nybble
00:F4E2  84FD              :                 STY     COUNT
                                             
                                             .IF     __65C02__
                           -                 STZ     TEMP+0          ; Clear conversion area
                           -                 STZ     TEMP+1
                                             .ELSE
00:F4E4  A000              :                 LDY     #0
00:F4E6  84FB              :                 STY     TEMP+0          ; Clear conversion area
00:F4E8  84FC              :                 STY     TEMP+1
                                             .ENDIF
                             
00:F4EA  20D0F4            :                 JSR     SKIP_CHAR       ; Fetch first character
00:F4ED  2015F5            :                 JSR     GET_NYBBLE      ; And try to convert
00:F4F0  9001              :                 IF      CS
00:F4F2  60                :                  RTS                    ; Syntax error
                                             ENDIF
                                             REPEAT
00:F4F3  06FB              :                  ASL    TEMP+0          ; Fold into the result
00:F4F5  26FC              :                  ROL    TEMP+1
00:F4F7  06FB              :                  ASL    TEMP+0
00:F4F9  26FC              :                  ROL    TEMP+1
00:F4FB  06FB              :                  ASL    TEMP+0
00:F4FD  26FC              :                  ROL    TEMP+1

Portable 65xx Assembler [16.06]

00:F4FF  06FB              :                  ASL    TEMP+0
00:F501  26FC              :                  ROL    TEMP+1
00:F503  05FB              :                  ORA    TEMP+0
00:F505  85FB              :                  STA    TEMP+0
                                              
00:F507  C6FD              :                  DEC    COUNT           ; Reach maximum length?
00:F509  F008              :                  BREAK  EQ
                                              
00:F50B  20BBF4            :                  JSR    NEXT_CHAR       ; Try for another nybble
00:F50E  2015F5            :                  JSR    GET_NYBBLE
00:F511  90E0              :                 UNTIL CS                
00:F513  18                :                 CLC                     ; Conversion sucessfull
00:F514  60                :                 RTS
                             
                             ;
                             ;
                             
                             GET_NYBBLE:
00:F515  2026F5            :                 JSR     IS_HEX          ; Got a hex digit?
00:F518  900A              :                 IF      CS
00:F51A  C941              :                  CMP    #'A'            ; Handle letters
00:F51C  9002              :                  IF     CS
00:F51E  E907              :                   SBC   #7
                                              ENDIF
00:F520  290F              :                  AND    #$0F            ; Skip out nybble
00:F522  18                :                  CLC                    ; Done
00:F523  60                :                  RTS
                                             ENDIF
00:F524  38                :                 SEC                     ; Set carry -- not hex
00:F525  60                :                 RTS
                             
                             ; Return with the carry set of the character in A is a digit or 'A' thru 'F'.
                             
                             IS_HEX:
00:F526  C93A              :                 CMP     #'9'+1
00:F528  B003              :                 IF      CC
00:F52A  C930              :                  CMP    #'0'
00:F52C  60                :                  RTS
                                             ENDIF
00:F52D  C947              :                 CMP     #'F'+1
00:F52F  B003              :                 IF      CC
00:F531  C941              :                  CMP    #'A'
00:F533  60                :                  RTS
                                             ENDIF
00:F534  18                :                 CLC
00:F535  60                :                 RTS
                                             
                             IS_PRINTABLE:
00:F536  C920              :                 CMP     #' '
00:F538  9006              :                 IF      CS
00:F53A  C97F              :                  CMP    #DEL
00:F53C  B002              :                  IF     CC
00:F53E  38                :                   SEC
00:F53F  60                :                   RTS

Portable 65xx Assembler [16.06]

                                              ENDIF
                                             ENDIF
00:F540  18                :                 CLC
00:F541  60                :                 RTS
                                             
                             ;===============================================================================
                             ;-------------------------------------------------------------------------------
                             
                             DISASSEMBLE:
00:F542  207FF6            :                 JSR     SPACE
00:F545  A000              :                 LDY     #0              ; Fetch the opcode
00:F547  B1F7              :                 LDA     (ADDR_S),Y
00:F549  AA                :                 TAX
00:F54A  2063F6            :                 JSR     HEX2            ; And display it
                                             
00:F54D  207FF6            :                 JSR     SPACE
00:F550  BD00F1            :                 LDA     MODES,X
00:F553  48                :                 PHA
00:F554  48                :                 PHA
00:F555  2943              :                 AND     #MB_REL|MB_ABS
00:F557  F00A              :                 IF      NE
00:F559  A001              :                  LDY    #1
00:F55B  B1F7              :                  LDA    (ADDR_S),Y
00:F55D  2063F6            :                  JSR    HEX2
00:F560  4C66F5            :                 ELSE
00:F563  207CF6            :                  JSR    SPACE2
                                             ENDIF
                                             
00:F566  207FF6            :                 JSR     SPACE
00:F569  68                :                 PLA
00:F56A  A8                :                 TAY
00:F56B  2941              :                 AND     #MB_REL|MB_ZPG
00:F56D  C941              :                 CMP     #MB_REL|MB_ZPG
00:F56F  F005              :                 IF      NE
00:F571  98                :                  TYA
00:F572  2903              :                  AND    #MB_ABS
00:F574  C903              :                  CMP    #MB_ABS
                                             ENDIF
00:F576  D00A              :                 IF      EQ
00:F578  A002              :                  LDY    #2
00:F57A  B1F7              :                  LDA    (ADDR_S),Y
00:F57C  2063F6            :                  JSR    HEX2
00:F57F  4C85F5            :                 ELSE
00:F582  207CF6            :                  JSR    SPACE2
                                             ENDIF
                                             
00:F585  C8                :                 INY                     ; Save the byte count
00:F586  98                :                 TYA
00:F587  48                :                 PHA
                             
00:F588  207FF6            :                 JSR     SPACE
00:F58B  A000              :                 LDY     #0              ; Fetch the opcode
00:F58D  B1F7              :                 LDA     (ADDR_S),Y
00:F58F  AA                :                 TAX

Portable 65xx Assembler [16.06]

00:F590  BD00F0            :                 LDA     OPCODES,X
00:F593  AA                :                 TAX
00:F594  BD01F2            :                 LDA     MNEMONICS+1,X
00:F597  85FB              :                 STA     TEMP
00:F599  BD00F2            :                 LDA     MNEMONICS+0,X
00:F59C  204AF6            :                 JSR     EXTRACT_LETTER
00:F59F  204AF6            :                 JSR     EXTRACT_LETTER
00:F5A2  204AF6            :                 JSR     EXTRACT_LETTER
00:F5A5  207FF6            :                 JSR     SPACE
                                             
00:F5A8  68                :                 PLA
00:F5A9  48                :                 PHA
00:F5AA  2920              :                 AND     #MB_BIT
00:F5AC  F010              :                 IF      NE
00:F5AE  A000              :                  LDY    #0
00:F5B0  B1F7              :                  LDA    (ADDR_S),Y
00:F5B2  2907              :                  AND    #7
00:F5B4  0930              :                  ORA    #'0'
00:F5B6  201EFF            :                  JSR    UART_TX
00:F5B9  A92C              :                  LDA    #','
00:F5BB  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F5BE  68                :                 PLA
00:F5BF  48                :                 PHA
00:F5C0  1005              :                 IF      MI
00:F5C2  A928              :                  LDA    #'('
00:F5C4  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F5C7  68                :                 PLA
00:F5C8  48                :                 PHA
00:F5C9  2903              :                 AND     #MB_ABS
00:F5CB  F022              :                 IF      NE
00:F5CD  48                :                  PHA
00:F5CE  C902              :                  CMP    #MB_IMM
00:F5D0  D005              :                  IF     EQ
00:F5D2  A923              :                   LDA   #'#'
00:F5D4  201EFF            :                   JSR   UART_TX
                                              ENDIF
00:F5D7  A924              :                  LDA    #'$'
00:F5D9  201EFF            :                  JSR    UART_TX
00:F5DC  68                :                  PLA
00:F5DD  C903              :                  CMP    #MB_ABS
00:F5DF  D007              :                  IF     EQ
00:F5E1  A002              :                   LDY   #2
00:F5E3  B1F7              :                   LDA   (ADDR_S),Y
00:F5E5  2063F6            :                   JSR   HEX2
                                              ENDIF
00:F5E8  A001              :                  LDY    #1
00:F5EA  B1F7              :                  LDA    (ADDR_S),Y
00:F5EC  2063F6            :                  JSR    HEX2
                                             ENDIF
                                             

Portable 65xx Assembler [16.06]

00:F5EF  68                :                 PLA
00:F5F0  48                :                 PHA
00:F5F1  2960              :                 AND     #MB_BIT|MB_REL
00:F5F3  C960              :                 CMP     #MB_BIT|MB_REL
00:F5F5  D005              :                 IF      EQ
00:F5F7  A92C              :                  LDA    #','
00:F5F9  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F5FC  68                :                 PLA
00:F5FD  48                :                 PHA
00:F5FE  A8                :                 TAY
00:F5FF  2940              :                 AND     #MB_REL
00:F601  F012              :                 IF      NE
00:F603  A924              :                  LDA    #'$'
00:F605  201EFF            :                  JSR    UART_TX
00:F608  98                :                  TYA
00:F609  A001              :                  LDY    #1
00:F60B  2920              :                  AND    #MB_BIT
00:F60D  F001              :                  IF     NE
00:F60F  C8                :                   INY
                                              ENDIF
                                              
00:F610  A972              :                  LDA    #'r'
00:F612  203BFF            :                  JSR    UART_RX
                                             ENDIF
                                             
00:F615  68                :                 PLA
00:F616  48                :                 PHA
00:F617  2910              :                 AND     #MB_ACC
00:F619  F005              :                 IF      NE
00:F61B  A941              :                  LDA    #'A'
00:F61D  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F620  68                :                 PLA
00:F621  48                :                 PHA
00:F622  2908              :                 AND     #MB_XRG
00:F624  F00A              :                 IF      NE
00:F626  A92C              :                  LDA    #','
00:F628  201EFF            :                  JSR    UART_TX
00:F62B  A958              :                  LDA    #'X'
00:F62D  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F630  68                :                 PLA
00:F631  48                :                 PHA
00:F632  1005              :                 IF      MI
00:F634  A929              :                  LDA    #')'
00:F636  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F639  68                :                 PLA
00:F63A  2904              :                 AND     #MB_YRG

Portable 65xx Assembler [16.06]

00:F63C  F00A              :                 IF      NE
00:F63E  A92C              :                  LDA    #','
00:F640  201EFF            :                  JSR    UART_TX
00:F643  A959              :                  LDA    #'Y'
00:F645  201EFF            :                  JSR    UART_TX
                                             ENDIF
                                             
00:F648  68                :                 PLA                     ; Return the number of bytes
00:F649  60                :                 RTS
                                             
                             EXTRACT_LETTER:
00:F64A  48                :                 PHA
00:F64B  291F              :                 AND     #$1F
00:F64D  0940              :                 ORA     #'@'
00:F64F  201EFF            :                 JSR     UART_TX
00:F652  68                :                 PLA
00:F653  46FB              :                 LSR     TEMP
00:F655  6A                :                 ROR     A
00:F656  46FB              :                 LSR     TEMP
00:F658  6A                :                 ROR     A
00:F659  46FB              :                 LSR     TEMP
00:F65B  6A                :                 ROR     A
00:F65C  46FB              :                 LSR     TEMP
00:F65E  6A                :                 ROR     A
00:F65F  46FB              :                 LSR     TEMP
00:F661  6A                :                 ROR     A
00:F662  60                :                 RTS
                                             
                                             
                             ;===============================================================================
                             ; Display Utilities
                             ;-------------------------------------------------------------------------------
                             
                             ; Display the byte in A as two hexadecimal digits. The values in A & Y are
                             ; destroyed.
                             
                             HEX2:
00:F663  48                :                 PHA                     ; Save a copy of the value
00:F664  4A                :                 LSR     A               ; Shift down the hi nybble
00:F665  4A                :                 LSR     A
00:F666  4A                :                 LSR     A
00:F667  4A                :                 LSR     A
00:F668  206CF6            :                 JSR     HEX             ; Convert and display
00:F66B  68                :                 PLA                     ; Pull back value and ...
                             
                             ; Display the lo nybble of A as a hexadecimal digit. The values in A & Y are
                             ; destroyed.
                             
00:F66C  2072F6            : HEX             JSR     TO_HEX          ; Convert to printable character
00:F66F  4C1EFF            :                 JMP     UART_TX         ; And display.
                                             
                             ;
                                             
00:F672  290F              : TO_HEX          AND     #$0F            ; Isolate the lo nybble

Portable 65xx Assembler [16.06]

00:F674  F8                :                 SED                     ; Converted to ASCII
00:F675  18                :                 CLC
00:F676  6990              :                 ADC     #$90
00:F678  6940              :                 ADC     #$40
00:F67A  D8                :                 CLD
00:F67B  60                :                 RTS
                             
                             ; Output two spaces.
                             
                             SPACE2:
00:F67C  207FF6            :                 JSR     SPACE
                                             
                             ; Output a single space. The values in A & Y are destroyed.
                             
                             SPACE:
00:F67F  A920              :                 LDA     #' '
00:F681  4C1EFF            :                 JMP     UART_TX
                                             
                             BAR:
00:F684  A97C              :                 LDA     #'|'
00:F686  4C1EFF            :                 JMP     UART_TX
                             
                             ; Output a CR/LF control sequence to move the display cursor to the start of
                             ; the next line. A & Y are destroyed.
                             
                             CRLF:
00:F689  A90D              :                 LDA     #CR             ; Output a carriage return
00:F68B  201EFF            :                 JSR     UART_TX
00:F68E  A90A              :                 LDA     #LF             ; .. followed by a new line
00:F690  4C1EFF            :                 JMP     UART_TX
                             
                             ;-------------------------------------------------------------------------------
                             
                             
                             SHOW_STR:
                                             REPEAT
00:F693  BDA0F6            :                  LDA    STRINGS,X
00:F696  D001              :                  IF     EQ
00:F698  60                :                   RTS
                                              ENDIF
00:F699  201EFF            :                  JSR    UART_TX
00:F69C  E8                :                  INX
00:F69D  4C93F6            :                 FOREVER
                             
                             STRINGS:
         00000000          = PC_STR          .EQU    .-STRINGS
00:F6A0  50433D00          :                 .BYTE   "PC=",0
         00000004          = SP_STR          .EQU    .-STRINGS
00:F6A4  2053503D00        :                 .BYTE   " SP=",0
         00000009          = P_STR           .EQU    .-STRINGS
00:F6A9  20503D00          :                 .BYTE   " P=",0
         0000000D          = A_STR           .EQU    .-STRINGS
00:F6AD  20413D00          :                 .BYTE   " A=",0
         00000011          = X_STR           .EQU    .-STRINGS

Portable 65xx Assembler [16.06]

00:F6B1  20583D00          :                 .BYTE   " X=",0
         00000015          = Y_STR           .EQU    .-STRINGS
00:F6B5  20593D00          :                 .BYTE   " Y=",0
         00000019          = ERR_STR         .EQU    .-STRINGS
00:F6B9  0D0A3F00          :                 .BYTE   CR,LF,"?",0
         0000001D          = HLP_STR         .EQU    .-STRINGS
00:F6BD  0D0A412078787878> :                 .BYTE   CR,LF,"A xxxx opcode [args]\tAssemble"
00:F6DC  0D0A442078787878> :                 .BYTE   CR,LF,"D xxxx yyyy\t\tDisassemble"
00:F6F6  0D0A47205B787878> :                 .BYTE   CR,LF,"G [xxxx]\t\tGoto"
00:F706  0D0A4D2078787878> :                 .BYTE   CR,LF,"M xxxx yyyy\t\tDisplay Memory"
00:F723  0D0A520909094469> :                 .BYTE   CR,LF,"R\t\t\tDisplay Registers"
00:F73A  0D0A532E2E2E0909> :                 .BYTE   CR,LF,"S...\t\t\tS19 Load"
00:F74B  0D0A54205B787878> :                 .BYTE   CR,LF,"T [xxxx]\t\tTrace"
00:F75C  0D0A572078787878> :                 .BYTE   CR,LF,"W xxxx yy\t\tWrite Memory"
00:F775  00                :                 .BYTE   0
                                             
00:F776  435A49443131564E  : FLAG            .BYTE   "CZID11VN"
00:F77E  0102040810204080  : BITS            .BYTE   $01,$02,$04,$08,$10,$20,$40,$80
                                             
                             ;==============================================================================
                             ; I/O Page
                             ;-------------------------------------------------------------------------------
                             
                                             .ORG    $FE00
00:FE00  0000000000000000> :                 .SPACE  256
                             
                             ;===============================================================================
                             ; Reset Handler
                             ;-------------------------------------------------------------------------------
                             
                                             .ORG    $FF00
                             
                             RESET:
00:FF00  D8                :                 CLD                     ; Ensure binary mode
00:FF01  A2FF              :                 LDX     #$FF            ; Reset the stack
00:FF03  9A                :                 TXS
                             
00:FF04  E8                :                 INX                     ; Clear buffer offsets
00:FF05  8E0002            :                 STX     RX_HEAD
00:FF08  8E0102            :                 STX     RX_TAIL
00:FF0B  8E0202            :                 STX     TX_HEAD
00:FF0E  8E0302            :                 STX     TX_TAIL
                             ;               STX     FLAGS           ; And flow control flags
                             
00:FF11  A901              :                 LDA     #$01            ; Enable ACIA RX interrupt
00:FF13  8D02FE            :                 STA     ACIA_CMND
                             
00:FF16  58                :                 CLI                     ; Allow interrupts
00:FF17  00                :                 BRK
                             
                             ;===============================================================================
                             ; UART Interface
                             ;-------------------------------------------------------------------------------
                             

Portable 65xx Assembler [16.06]

                             XON:
00:FF18  A911              :                 LDA     #DC1
00:FF1A  D002              :                 BNE     UART_TX
                             
                             XOFF:
00:FF1C  A913              :                 LDA     #DC3
                             
                             ; Inserts the byte in A into the transmit buffer. If the buffer is full then
                             ; wait until some space is available. Registers are preserved.
                             
                             UART_TX:
00:FF1E  48                :                 PHA
00:FF1F  84FE              :                 STY     IO_TEMP
                                             
00:FF21  AC0302            :                 LDY     TX_TAIL         ; Save the data byte at the tail
00:FF24  994202            :                 STA     TX_BUFF,Y
00:FF27  20A7FF            :                 JSR     BUMP_TX         ; Work out the next offset
                                             REPEAT                  ; And wait until save to store
00:FF2A  CC0202            :                  CPY    TX_HEAD
00:FF2D  F0FB              :                 UNTIL   NE
00:FF2F  8C0302            :                 STY     TX_TAIL
00:FF32  A905              :                 LDA     #$05            ; Ensure TX interrupt enabled
00:FF34  8D02FE            :                 STA     ACIA_CMND
                                             
00:FF37  A4FE              :                 LDY     IO_TEMP
00:FF39  68                :                 PLA
00:FF3A  60                :                 RTS                     ; Done
                             
                             ;
                             ;
                             
                             UART_RX:
                             ;               BIT     FLAGS           ; Terminal stopped from sending?
                             ;               IF      MI
                             ;                JSR    RX_COUNT        ; Yes, check RX buffer count
                             ;                CMP    #RX_SIZE*1/10   ; Restart when only 10% full
                             ;                IF     CC
                             ;                 LDA   #DC1            ; Send XON
                             ;                 JSR   UART_TX
                             ;               .IF     __65C02__
                             ;                 STZ   FLAGS           ; Mark as no longer stopped
                             ;               .ELSE
                             ;                 LDA   #0              ; Mark as no longer stopped
                             ;                 STA   FLAGS
                             ;               .ENDIF
                             ;                ENDIF
                             ;               ENDIF
                             
00:FF3B  84FE              :                 STY     IO_TEMP
00:FF3D  AC0002            :                 LDY     RX_HEAD         ; Wait until there is some data
                                             REPEAT
00:FF40  CC0102            :                  CPY    RX_TAIL
00:FF43  F0FB              :                 UNTIL   NE
00:FF45  B90402            :                 LDA     RX_BUFF,Y       ; Then extract the head byte

Portable 65xx Assembler [16.06]

00:FF48  20A7FF            :                 JSR     BUMP_RX         ; Update the offset
00:FF4B  8C0002            :                 STY     RX_HEAD
00:FF4E  A4FE              :                 LDY     IO_TEMP
00:FF50  60                :                 RTS                     ; Done
                             
                             ;
                             ;
                             
                                             .IF     0
                           - RX_COUNT:
                           -                 SEC
                           -                 LDA     RX_TAIL         ; Subtract the two offsets
                           -                 SBC     RX_HEAD
                           -                 IF      CC
                           -                  ADC    #RX_SIZE        ; And correct if negative
                           -                 ENDIF
                           -                 RTS                     ; Done
                                             .ENDIF
                                             
                             ;===============================================================================
                             ; NMI Handler
                             ;-------------------------------------------------------------------------------
                             
                             NMI:
00:FF51  4C8EF2            :                 JMP     BREAK
                             
                             ;===============================================================================
                             ; IRQ Handler
                             ;-------------------------------------------------------------------------------
                             
                             ; Handle interrupts, currently just UART transmit buffer empty and recieve
                             ; buffer full.
                             
                             IRQ:
00:FF54  48                :                 PHA                     ; Save users registers
                                             .IF     __65C02__
                           -                 PHX
                           -                 PHY
                                             .ELSE
00:FF55  8A                :                 TXA
00:FF56  48                :                 PHA
00:FF57  98                :                 TYA
00:FF58  48                :                 PHA
00:FF59  D8                :                 CLD
                                             .ENDIF
                             
00:FF5A  BA                :                 TSX                     ; Check for BRK
00:FF5B  BD0401            :                 LDA     STACK+4,X
00:FF5E  2910              :                 AND     #$10
00:FF60  D0EF              :                 BNE     NMI             ; Enter via NMI handler
                             
                             ;-------------------------------------------------------------------------------
                             
00:FF62  AD01FE            :                 LDA     ACIA_STAT       ; ACIA is the source?

Portable 65xx Assembler [16.06]

00:FF65  103A              :                 BPL     NOT_ACIA        ; No.
                             
00:FF67  48                :                 PHA
00:FF68  2910              :                 AND     #$10            ; TX Buffer empty?
00:FF6A  F01C              :                 IF      NE
                             ;                BIT    FLAGS           ; Do we need to send XOFF?
                             ;                IF     VS
                             ;                 LDA   #DC3            ; Yes, send XOFF to terminal
                             ;                 STA   ACIA_DATA
                             ;                 ASL   FLAGS           ; And mark as sent
                             ;                 BNE   NOT_ACIA
                             ;                ENDIF
                             
00:FF6C  AC0202            :                  LDY    TX_HEAD         ; Any data to send?
00:FF6F  CC0302            :                  CPY    TX_TAIL
00:FF72  F00F              :                  IF     NE
00:FF74  B94202            :                   LDA   TX_BUFF,Y       ; Yes, extract and send it
00:FF77  8D00FE            :                   STA   ACIA_DATA
00:FF7A  20A7FF            :                   JSR   BUMP_TX
00:FF7D  8C0202            :                   STY   TX_HEAD
00:FF80  4C88FF            :                  ELSE
00:FF83  A901              :                   LDA   #$01            ; No, disable TX interrupt
00:FF85  8D02FE            :                   STA   ACIA_CMND
                                              ENDIF
                                             ENDIF
                             
00:FF88  68                :                 PLA
00:FF89  2908              :                 AND     #$08            ; RX Buffer full?
00:FF8B  F014              :                 IF      NE
00:FF8D  AD00FE            :                  LDA    ACIA_DATA       ; Yes, fetch the character
00:FF90  AC0102            :                  LDY    RX_TAIL         ; .. and save it
00:FF93  990402            :                  STA    RX_BUFF,Y
00:FF96  20A7FF            :                  JSR    BUMP_RX
00:FF99  CC0002            :                  CPY    RX_HEAD         ; Is buffer completely full?
00:FF9C  F003              :                  IF     NE
00:FF9E  8C0102            :                   STY   RX_TAIL         ; No, update tail offset
                                              ENDIF
                             
                             ;                BIT    FLAGS           ; Already stopped or stopping?
                             ;                IF     PL
                             ;                 IF    VC
                             ;                  JSR  RX_COUNT        ; Fetch FX buffer count
                             ;                  CMP  #RX_SIZE*9/10   ; More than 90%
                             ;                  IF   CS
                             ;                   LDA #FLAG_STOP      ; Yes, set flags to send XOFF
                             ;                   STA FLAGS
                             ;                   LDA #$05            ; Ensure transmit interrupt enabled
                             ;                   STA ACIA_CMND
                             ;                  ENDIF
                             ;                 ENDIF
                             ;                ENDIF
                                             ENDIF
                             NOT_ACIA:
                             

Portable 65xx Assembler [16.06]

                             ;-------------------------------------------------------------------------------
                             
                                             .IF     __65C02__
                           -                 PLY                     ; Restore user registers
                           -                 PLX
                                             .ELSE
00:FFA1  68                :                 PLA                     ; Restore user registers
00:FFA2  A8                :                 TAY
00:FFA3  68                :                 PLA
00:FFA4  AA                :                 TAX
                                             .ENDIF
00:FFA5  68                :                 PLA
00:FFA6  40                :                 RTI                     ; Done
                             
                             ; Bump and wrap a recieve buffer index value.
                             
                             BUMP_RX:
                                             .IF     RX_SIZE != TX_SIZE
                           -                 INY
                           -                 CPY     #RX_SIZE
                           -                 IF      EQ
                           -                  LDY    #0
                           -                 ENDIF
                           -                 RTS
                                             .ENDIF
                             
                             ; Bump and wrap a transmit buffer index value.
                             
                             BUMP_TX:
00:FFA7  C8                :                 INY
00:FFA8  C03E              :                 CPY     #TX_SIZE
00:FFAA  D002              :                 IF      EQ
00:FFAC  A000              :                  LDY    #0
                                             ENDIF
00:FFAE  60                :                 RTS
                             
                             ;===============================================================================
                             ; Vector Locations
                             ;-------------------------------------------------------------------------------
                             
                                             .ORG    $FFFA
                             
00:FFFA  51FF              :                 .WORD   NMI             ; NMI
00:FFFC  00FF              :                 .WORD   RESET           ; RESET
00:FFFE  54FF              :                 .WORD   IRQ             ; IRQ/BRK
                             
                                             .END


Portable 65xx Assembler [16.06]

Symbol Table

ACIA_CMND                        0000FE02  | MB_IMP                           00000000 
ACIA_CTRL                        0000FE03  | MO_IMP                           00000000 
ACIA_DATA                        0000FE00  | NUL                              00000000 
ACIA_STAT                        0000FE01  | OP_ERR                           00000000 
ADDR_E                           000000F9  | PC_STR                           00000000 
ADDR_S                           000000F7  | __6501__                         00000000 
APPEND_CHAR                      0000F4B4  | __65816__                        00000000 
APPEND_HEX                       0000F4B1  | __65832__                        00000000 
APPEND_HEX2                      0000F4A8  | __65C02__                        00000000 
A_REG                            000000F0  | __65SC02__                       00000000 
A_STR                            0000000D  | MB_ZPG                           00000001 
BACKSPACE                        0000F326  | MO_ZPG                           00000001 
BAR                              0000F684  | __6502__                         00000001 
BEL                              00000007  | MB_IMM                           00000002 
BITS                             0000F77E  | MO_IMM                           00000002 
BREAK                            0000F28E  | OP_ADC                           00000002 
BS                               00000008  | MB_ABS                           00000003 
BUFFER                           00000280  | MO_ABS                           00000003 
BUMP_ADDR                        0000F478  | MB_YRG                           00000004 
BUMP_RX                          0000FFA7  | OP_AND                           00000004 
BUMP_TX                          0000FFA7  | SP_STR                           00000004 
CHECK_END                        0000F482  | MO_ZPX                           00000005 
CMD_LEN                          000000F6  | MO_ZPY                           00000005 
CMD_SIZE                         00000080  | OP_ASL                           00000006 
COMMAND                          0000F2FA  | BEL                              00000007 
COUNT                            000000FD  | MO_ABY                           00000007 
CR                               0000000D  | BS                               00000008 
CRLF                             0000F689  | MB_XRG                           00000008 
DC1                              00000011  | HT                               00000009 
DC3                              00000013  | P_STR                            00000009 
DEL                              0000007F  | LF                               0000000A 
DISASSEMBLE                      0000F542  | MO_ABX                           0000000B 
ERROR                            0000F45E  | OP_BCC                           0000000C 
ERR_STR                          00000019  | A_STR                            0000000D 
ESC                              0000001B  | CR                               0000000D 
EXTRACT_LETTER                   0000F64A  | OP_BCS                           0000000E 
FLAG                             0000F776  | MB_ACC                           00000010 
FLAGS                            000000FF  | MO_ACC                           00000010 
FLAG_STOP                        00000040  | OP_BEQ                           00000010 
FLAG_STOPPED                     00000080  | DC1                              00000011 
GET_BYTE                         0000F4E0  | X_STR                            00000011 
GET_NYBBLE                       0000F515  | OP_BIT                           00000012 
GET_WORD                         0000F4DC  | DC3                              00000013 
HEX                              0000F66C  | OP_BNE                           00000014 
HEX2                             0000F663  | Y_STR                            00000015 
HLP_STR                          0000001D  | OP_BMI                           00000016 
HT                               00000009  | OP_BPL                           00000018 
IO_TEMP                          000000FE  | ERR_STR                          00000019 
IRQ                              0000FF54  | ESC                              0000001B 
IS_HEX                           0000F526  | OP_BRK                           0000001C 
IS_PRINTABLE                     0000F536  | HLP_STR                          0000001D 
LF                               0000000A  | OP_BVC                           0000001E 

Portable 65xx Assembler [16.06]

MB_ABS                           00000003  | MB_BIT                           00000020 
MB_ACC                           00000010  | OP_BVS                           00000020 
MB_BIT                           00000020  | OP_CLC                           00000022 
MB_IMM                           00000002  | OP_CLD                           00000024 
MB_IMP                           00000000  | OP_CLI                           00000026 
MB_IND                           00000080  | OP_CLV                           00000028 
MB_REL                           00000040  | OP_CMP                           0000002A 
MB_XRG                           00000008  | OP_CPX                           0000002C 
MB_YRG                           00000004  | OP_CPY                           0000002E 
MB_ZPG                           00000001  | OP_DEC                           00000030 
MNEMONICS                        0000F200  | OP_DEX                           00000032 
MODES                            0000F100  | OP_DEY                           00000034 
MO_ABS                           00000003  | OP_EOR                           00000036 
MO_ABX                           0000000B  | OP_INC                           00000038 
MO_ABY                           00000007  | OP_INX                           0000003A 
MO_ACC                           00000010  | OP_INY                           0000003C 
MO_IAB                           00000083  | OP_JMP                           0000003E 
MO_IMM                           00000002  | RX_SIZE                          0000003E 
MO_IMP                           00000000  | TX_SIZE                          0000003E 
MO_IZX                           00000089  | FLAG_STOP                        00000040 
MO_IZY                           00000085  | MB_REL                           00000040 
MO_REL                           00000040  | MO_REL                           00000040 
MO_ZPG                           00000001  | OP_JSR                           00000040 
MO_ZPX                           00000005  | OP_LDA                           00000042 
MO_ZPY                           00000005  | OP_LDX                           00000044 
NEXT_CHAR                        0000F4BB  | OP_LDY                           00000046 
NMI                              0000FF51  | OP_LSR                           00000048 
NOT_ACIA                         0000FFA1  | OP_NOP                           0000004A 
NUL                              00000000  | OP_ORA                           0000004C 
OPCODES                          0000F000  | OP_PHA                           0000004E 
OP_ADC                           00000002  | OP_PHP                           00000050 
OP_AND                           00000004  | OP_PLA                           00000056 
OP_ASL                           00000006  | OP_PLP                           00000058 
OP_BCC                           0000000C  | OP_ROL                           00000060 
OP_BCS                           0000000E  | OP_ROR                           00000062 
OP_BEQ                           00000010  | OP_RTI                           00000064 
OP_BIT                           00000012  | OP_RTS                           00000066 
OP_BMI                           00000016  | OP_SBC                           00000068 
OP_BNE                           00000014  | OP_SEC                           0000006A 
OP_BPL                           00000018  | OP_SED                           0000006C 
OP_BRK                           0000001C  | OP_SEI                           0000006E 
OP_BVC                           0000001E  | OP_STA                           00000072 
OP_BVS                           00000020  | OP_STX                           00000076 
OP_CLC                           00000022  | OP_STY                           00000078 
OP_CLD                           00000024  | OP_TAX                           0000007C 
OP_CLI                           00000026  | OP_TAY                           0000007E 
OP_CLV                           00000028  | DEL                              0000007F 
OP_CMP                           0000002A  | CMD_SIZE                         00000080 
OP_CPX                           0000002C  | FLAG_STOPPED                     00000080 
OP_CPY                           0000002E  | MB_IND                           00000080 
OP_DEC                           00000030  | MO_IAB                           00000083 
OP_DEX                           00000032  | OP_TSX                           00000084 
OP_DEY                           00000034  | MO_IZY                           00000085 
OP_EOR                           00000036  | OP_TXA                           00000086 

Portable 65xx Assembler [16.06]

OP_ERR                           00000000  | OP_TXS                           00000088 
OP_INC                           00000038  | MO_IZX                           00000089 
OP_INX                           0000003A  | OP_TYA                           0000008A 
OP_INY                           0000003C  | A_REG                            000000F0 
OP_JMP                           0000003E  | X_REG                            000000F1 
OP_JSR                           00000040  | Y_REG                            000000F2 
OP_LDA                           00000042  | P_REG                            000000F3 
OP_LDX                           00000044  | PC_REG                           000000F4 
OP_LDY                           00000046  | CMD_LEN                          000000F6 
OP_LSR                           00000048  | ADDR_S                           000000F7 
OP_NOP                           0000004A  | ADDR_E                           000000F9 
OP_ORA                           0000004C  | TEMP                             000000FB 
OP_PHA                           0000004E  | COUNT                            000000FD 
OP_PHP                           00000050  | IO_TEMP                          000000FE 
OP_PLA                           00000056  | FLAGS                            000000FF 
OP_PLP                           00000058  | STACK                            00000100 
OP_ROL                           00000060  | RX_HEAD                          00000200 
OP_ROR                           00000062  | RX_TAIL                          00000201 
OP_RTI                           00000064  | TX_HEAD                          00000202 
OP_RTS                           00000066  | TX_TAIL                          00000203 
OP_SBC                           00000068  | RX_BUFF                          00000204 
OP_SEC                           0000006A  | TX_BUFF                          00000242 
OP_SED                           0000006C  | BUFFER                           00000280 
OP_SEI                           0000006E  | OPCODES                          0000F000 
OP_STA                           00000072  | MODES                            0000F100 
OP_STX                           00000076  | MNEMONICS                        0000F200 
OP_STY                           00000078  | BREAK                            0000F28E 
OP_TAX                           0000007C  | REGISTERS                        0000F2A6 
OP_TAY                           0000007E  | COMMAND                          0000F2FA 
OP_TSX                           00000084  | PROMPT                           0000F2FE 
OP_TXA                           00000086  | BACKSPACE                        0000F326 
OP_TXS                           00000088  | SQUAWK                           0000F347 
OP_TYA                           0000008A  | ERROR                            0000F45E 
PC_REG                           000000F4  | SET_ADDR_S                       0000F466 
PC_STR                           00000000  | SET_ADDR_E                       0000F46F 
PROMPT                           0000F2FE  | BUMP_ADDR                        0000F478 
P_REG                            000000F3  | CHECK_END                        0000F482 
P_STR                            00000009  | SET_PROMPT                       0000F48C 
REGISTERS                        0000F2A6  | APPEND_HEX2                      0000F4A8 
RESET                            0000FF00  | APPEND_HEX                       0000F4B1 
RX_BUFF                          00000204  | APPEND_CHAR                      0000F4B4 
RX_HEAD                          00000200  | NEXT_CHAR                        0000F4BB 
RX_SIZE                          0000003E  | TO_UPPER                         0000F4C4 
RX_TAIL                          00000201  | SKIP_CHAR                        0000F4D0 
SET_ADDR_E                       0000F46F  | GET_WORD                         0000F4DC 
SET_ADDR_S                       0000F466  | GET_BYTE                         0000F4E0 
SET_PROMPT                       0000F48C  | GET_NYBBLE                       0000F515 
SHOW_STR                         0000F693  | IS_HEX                           0000F526 
SKIP_CHAR                        0000F4D0  | IS_PRINTABLE                     0000F536 
SPACE                            0000F67F  | DISASSEMBLE                      0000F542 
SPACE2                           0000F67C  | EXTRACT_LETTER                   0000F64A 
SPI_CTRL                         0000FE05  | HEX2                             0000F663 
SPI_DATA                         0000FE04  | HEX                              0000F66C 
SPI_DVSR                         0000FE06  | TO_HEX                           0000F672 

Portable 65xx Assembler [16.06]

SPI_SLCT                         0000FE07  | SPACE2                           0000F67C 
SPI_STAT                         0000FE05  | SPACE                            0000F67F 
SP_STR                           00000004  | BAR                              0000F684 
SQUAWK                           0000F347  | CRLF                             0000F689 
STACK                            00000100  | SHOW_STR                         0000F693 
STRINGS                          0000F6A0  | STRINGS                          0000F6A0 
TEMP                             000000FB  | FLAG                             0000F776 
TO_HEX                           0000F672  | BITS                             0000F77E 
TO_UPPER                         0000F4C4  | ACIA_DATA                        0000FE00 
TX_BUFF                          00000242  | ACIA_STAT                        0000FE01 
TX_HEAD                          00000202  | ACIA_CMND                        0000FE02 
TX_SIZE                          0000003E  | ACIA_CTRL                        0000FE03 
TX_TAIL                          00000203  | SPI_DATA                         0000FE04 
UART_RX                          0000FF3B  | SPI_CTRL                         0000FE05 
UART_TX                          0000FF1E  | SPI_STAT                         0000FE05 
XOFF                             0000FF1C  | SPI_DVSR                         0000FE06 
XON                              0000FF18  | SPI_SLCT                         0000FE07 
X_REG                            000000F1  | RESET                            0000FF00 
X_STR                            00000011  | XON                              0000FF18 
Y_REG                            000000F2  | XOFF                             0000FF1C 
Y_STR                            00000015  | UART_TX                          0000FF1E 
__6501__                         00000000  | UART_RX                          0000FF3B 
__6502__                         00000001  | NMI                              0000FF51 
__65816__                        00000000  | IRQ                              0000FF54 
__65832__                        00000000  | NOT_ACIA                         0000FFA1 
__65C02__                        00000000  | BUMP_RX                          0000FFA7 
__65SC02__                       00000000  | BUMP_TX                          0000FFA7 
